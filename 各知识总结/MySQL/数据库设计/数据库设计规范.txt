1.数据库命名规范
	1.所有数据库对象名称必须使用小写字母并用下划线分割
	2.所有数据库对象名称禁止使用Mysql保留的关键字，比如'from'
	3.用户数据库  	mc_userdb
	4.用户账号表 	user_account
	5.临时库表以tmp为前缀并以日期为后缀
	6.备份库，备份表必须以bak为前缀并以日期为后缀
	7.所有存储相同数据列的列名和列类型必须一致

2.数据库基本设计规范
		1.所有的表必须使用Innodb存储引擎，5.6版本以后,默认存储引擎
		2.支持事务，行级锁，更好的恢复性，高并发下性能好(因为是行级锁)
		3.数据库和表字符集统一使用UTF8
		4.所有的表和字段都要添加注释
		5.尽量控制单表数据量大小，建议控制在500w以内,如果数据量超出，可以使用历史数据归档，分库分表手段来控制数据量的大小
		6.谨慎使用MySQL分区表，分区表在物理上表现为多个文件，在逻辑上表现为一个表，建议采用物理分表的方式管理大数据
		7.尽量做到冷热数据分离，减小表的宽度（列的数量）
			减少磁盘IO，保证热数据的内存缓存命中率
			利用更有效的利用缓存，避免读取无用的冷数据
			经常使用的列放在一个表，冷热分离
		8.禁止在表中建立表中预留字段
			预留字段的命名很难做到见名识意
			预留字段无法确认存储的数据类型
		9.禁止数据库中存储图片和二进制文件
		10.禁止在线上做数据库压力测试
3.数据库索引设计规范
	1.不要滥用索引，建议单表的索引不超过5个
	2.每个innodb表必须有一个主键
		1.不使用更新频繁的列作为主键，不使用多列主键
		2.不使用UUID,MD5，HASH,字符串做主键
		3.建议使用自增ID作主键
	3.使用索引建议：
		1.在WHERE,ORDER BY,GROUP BY,DISTINCT字段和多表连接的列
		2.关于连接的使用
		3.对于频繁查询的优先使用覆盖索引
	4.避免使用外键约束
		1.外键可用于保证数据的参照完整性，但其建议在业务端实现
		2.外键会影响父表和子表的写操作从而降低性能	
4.数据库字段设计规范
	1.字段类型的选择
		1.优先选择存储需要的最小的数据类型
		2.将字符串转换为数据类型存储
		3.避免使用TEXT,BLOB数据类型
		4.避免使用ENUM数据类型
		5.尽可能把所有的列设置为NOT NULL
			索引NULL列需要额外的空间来存储
		6.使用TIMESTAMP或DATETIME类型来存储时间
			TIMESTAMP范围是1970~2038,如果超出TIMESTAMP取值范围使用DATETIME类型
		7.存储财务相关数据，必须使用decimal类型
			1.Decimal数据类型为精准浮点数，在计算时不会丢失精度
			2.占用空间由定义的宽度决定
			3.可用于存储比bigint更大的数据类型

5.数据库SQL开发规范
	1.建议使用预编译语句进行数据库操作
		1.只传参数，比传递SQL语句跟更高效
		2.相同一句可以一次解析，多次使用，提高处理效率
	2.避免数据库类型隐式转换
		1.比如参数是字符串自动转换为数字
	3.合理利用存在的索引，而不是盲目增加索引
		1.充分利用表上已存在的索引
		2.避免使用双%%的模糊查询，如 like '%abc%'
		3.一个SQL只能利用到复合索引中的一列进行范围查询
	4.禁止使用SELECT * ，必须使用SELECT <字段>查询
		会消耗更多的CPU和IO以及宽带
		无法使用覆盖索引
		可以减少结构变更带来的影响
	5.避免使用子查询，用join来优化子查询
		子查询的结果集无法使用索引
		子查询会产生临时表操作，如果子查询数据量大会影响效率
		消耗过多的CPU和IO资源
	6.避免使用JOIN关联太多的表
		每join一个表会多占用一部分内存(join_buff_size,关联缓存)
		会产生临时表操作，影响查询效率
		建议关联不超过5个
	7.减少同数据库的交互次数
		合并同个相同的操作到一起，可以提高处理效率
	8.使用in代替or
		in操作可以有效的利用索引
	9.禁止使用order by rand()进行随机排序
		会把表中所有符合条件的数据装载到内存中进行排序，会消耗内存和CPU和IO资源
		推荐使用在程序中获取一个随机值，然后在数据库中获取读取方式
	9.WHERE从句中禁止对列进行函数转换和计算
		对列进行函数转换或计算会导致无法使用索引
		如：where date(createtime) = '20160901'改	where createtime >= '20160901' and createtime <'20160902'
	10.在明显不会有重复值时使用UNION ALL 而不是UNION
		UNION会把所有数据放到临时表中在进行去重操作
		UNION ALL不会再对结果集进行去重操作
	11.拆分复杂的大SQL为多个小SQL
		Mysql一个SQL只能使用一个CPU进行计算
		SQL拆分后可以通过并行执行来提高处理效率
6.数据库操作行为规范
	1.超过100万行的批量写操作，要分批多次进行操作
		大量的写操作会造成严重的主从延迟
		避免产生大事务的操作
	2.禁止为程序使用的账号赋予super权限
		当达到最大连接数限制时，还允许一个有super权限的用户连接 
	3.程序使用的账号不准有drop操作





Mysql分区表：
	1.查看是否支持分区表:SHOW PLUGINS;
		如果找的到name=partition的行，则说明支持分区表

	2.特点：在逻辑上是一个表，但是在物理上存储在多个文件中
		2.1：查询分区信息:	
			表名，分区名，分区描述，表行数
			SELECT table_name,partition_name,partition_description,table_rows FROM information_schema.PARTITIONS WHERE table_name = '表名';

		2.2:添加分区：
			ALTER TABLE customer_login_log ADD PARTITION (PARTITION p4 VALUES LESS THAN(2019));
		2.3:删除分区:
			ALTER TABLE customer_login_log DROP PARTIOTION p0;
		2.4:归档迁移，将那个分区的数据删除，迁移到另一个表上
			ALTER TABLE customer_login_log exchange partition p0 with table arch_customer_login_log;

	3.按HASH分区:
		1.特点
			1.根据MOD(分区键，分区数)的值把数据行存储到表的不同分区中
			2.数据可以平均分布在各个分区中
			3.HASH分区的键值必须是一个INT类型的值，或是通过函数可以转为INT类型
		2.使用
		CREATE TABLE (...)engine = INNODB PARTITION BY HASH(字段) PARTITIONS 4;
		CREATE TABLE (...)engine = INNODB PARTITION BY HASH(UNIX_TIMESTAMP(login_time)) PARTITIONS 4; 	//分区数量为4

		3.例子：
			1.创建分区表:
				CREATE TABLE customer_login_log(
					customer_id INT UNSIGNED NOT NULL,
					login_time TIMESTAMP,
					login_ip  INT UNSIGNED,
					login_type TINYINT NOT NULL
				)PARTITION BY HASH(login_ip) PARTITIONS 6;
			2.在数据库下会出现以下文件:
				customer_login_log#p#p0.ibd
				customer_login_log#p#p1.ibd
				customer_login_log#p#p2.ibd
				customer_login_log#p#p3.ibd
				customer_login_log#p#p4.ibd
				customer_login_log#p#p5.ibd
				customer_login_log.frm
				customer_login_log.par

	3.范围分区（RANGE）
		使用场景：
			分区键为日期或是时间类型的
			所以查询中都包括分区键

		例子：	
			CREATE TABLE customer_login_log(
				customer_id INT UNSIGNED NOT NULL,
				login_time TIMESTAMP,
				login_ip  INT UNSIGNED,
				login_type TINYINT NOT NULL
			)PARTITION BY RANGE(login_ip)(
			 	PARTITION p0 VALUES LESS THAN (10000),			//0~9999
			 	PARTITION p1 VALUES LESS THAN (20000),			//10000~19999
			 	PARTITION p2 VALUES LESS THAN (30000),			//20000~29999
			 	PARTITION p3 VALUES LESS THAN MAXVALUE			//>30000
			 );

	4.LIST分区
		特点:
			1.按分区键取值的列表进行分区
			2.和范围分区一样，各分区的列表值不能重复
			3.每一行数据必须能找到对应的分区列表，否者数据插入失败

		例子：
			CREATE TABLE customer_login_log2(
				customer_id INT UNSIGNED NOT NULL,
				login_time TIMESTAMP,
				login_ip  INT UNSIGNED,
				login_type TINYINT NOT NULL
			)PARTITION BY LIST(login_type)(
				PARTITION p0 VALUES IN (1,3,5,7,9),
				PARTITION p1 VALUES IN (2,4,6,8)
			);


	5.常用的例子，根据年来对表进行分区，分区的键值里不能对timestamp使用函数，所以改用datetime
		CREATE TABLE customer_login_log4(
			customer_id INT UNSIGNED NOT NULL,
			login_time datetime,
			login_ip  INT UNSIGNED,
			login_type TINYINT NOT NULL
		)PARTITION BY RANGE(YEAR(login_time))(
			 PARTITION p0 VALUES LESS THAN (2015),
			 PARTITION p1 VALUES LESS THAN (2016),
			 PARTITION p2 VALUES LESS THAN (2017),
			 PARTITION p3 VALUES LESS THAN (2018)
		);

	6.使用分区表的注意事项：
		1.结合业务场景选择分区键，避免跨分区查询
		2.对分区表进行查询最好在WHERE 从句中包含分区键
		3.具有主键或唯一所以的表，主键或唯一索引必须是分区键的一部分


执行计划分析(Explain)：
	Explain可以对SELECT UPDATE INSERT DELETE REPLACE进行分析
	使用Explain会获得以下信息:
		1.SQL如何使用索引
		2.连接查询的执行顺序
		3.查询扫描的数据行数

	result分析:
		1.ID列：
			ID列中的数据为一组数字，表示执行SELECT语句的顺序
			ID值相同时，执行顺序由上至下
			ID值越大优先级越高，越先被执行
		2.SELECT_TYPE:
			值：含义
			SIMPLE:不包含子查询或是UNION操作的查询
			PRIMARY:查询中包含任何子查询，那么最外层的查询被标记为PRIMARY
			SUBQUERY:SELECT列表的子查询
			DEPENDENT SUBQUERY:依赖外部结果的子查询

			例：EXPLAIN SELECT c.category_name,a.product_name,b.title FROM product_info a JOIN product_comment b ON a.product_id = b.product_id JOIN product_category c ON c.category_id = a.one_category_id;

		3.TABLE列：
			值：含义
			<unionM,N>由ID为M,N查询uinon产生的结果集
			<derivedN>/<subqueryN>由ID为N的查询产生的结果
		4.TYPE列：
			代表访问数据的方式，从上往下，效率越来越低
			System:这是const联接类型的一个特例，
			const:当查询的表只有一行时使用表中有且只有一个匹配的行时使用，如对主键或是唯一索引的查询，这是效率最高的方式
			eq_ref:唯一索引或主键索引查找，对于没个索引键，表中只有一条匹配记录与之匹配
			ref:非唯一索引查找，返回匹配某个单独值的所有行
			ref_or_null:类似于ref类型的查询，但是附加了对NULL值列的查询
			index_merge:该联接类型表示使用了索引合并优化方法
			range:索引范围扫描，常见于between,>,<这样的查询条件
			index:FULL index Scan 全索引扫描，同ALL的区别是，遍历的是索引树
			ALL FULL TABLE Scan 全表扫描，效率最差的

		5.Extra列：
			Distinct:优化distinct操作，在找到第一匹配的元组后即停止找相同的值的动作
			No exists:使用not exists来优化查询
			Using filesort：使用额外操作进行排序，通常会出现在order by 或 group by查询中
			Using index:使用覆盖索引进行查询
			Using temporary:需要使用临时表来处理查询，常见于排序，子查询，和分组查询
			Using where:需要在MYsql服务器层使用WHERE条件来过滤数据
			select tables optimized away:直接通过索引来获取数据，不用访问表

		6.POSSIBLE_KEYS:
			查询中可能会使用到的索引
			指出Mysql能使用哪些索引来优化查询
			查询列所涉及的列上的索引都会被列出来，但不一定会被使用

		7.KEY列：
			查询优化器在查询时实际所使用的索引，如果没有可用的索引则显示NULL,如果使用了覆盖索引，则该索引仅出现在KEY列中



备份表：
	1.采用SQL来备份（备份表都要以bak为开头）：
		1.CREATE TABLE bak_customer_login_20190710 LIKE customer_login;
		2.INSERT INTO bak_customer_login_20190710 SELECT * FROM customer_login;
	2.采用SQL文件来备份