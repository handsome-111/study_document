Mongodb-java-driver:MongoDB驱动程序
	1.
		1.java-driver官方文档：http://mongodb.github.io/mongo-java-driver/3.10/
		2.spring Mongodb文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/
		3.spring boot Mongodb文档：

	2.在spring boot里配置mongodb:
		spring:
		 	data:
			    mongodb:
			      uri: mongodb://hdgj:123456@127.0.0.1:27017/hdgj
			      
			      连接复制集的uri:
			      mongodb://127.0.0.1:27017/hdgj?replSet=rs0,mongodb://127.0.0.1:27018/hdgj

		2.1.获取MongoClient客户端，通过以上的配置之后，可以直接自动注入MongoClient客户端，
			如：
				import com.mongodb.MongoClient;
				
				@Autowired
				private MongoClient mongoClient;

		3.导入依赖：
			<!-- spring boot mongodb -->
		    <dependency>
			    <groupId>org.springframework.boot</groupId>
			    <artifactId>spring-boot-starter-data-mongodb</artifactId>
		    </dependency>
		    
		    <dependency>
			    <groupId>org.springframework.boot</groupId>
			    <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>
		    </dependency>
		    <!-- mongodb plugin -->
		    <dependency>
				<groupId>com.cybermkd</groupId>
				<artifactId>MongodbPlugin</artifactId>
				<version>1.0.8.2</version>
			</dependency>

	操作Mongodb的方式有两种，一种是Repository，另一种是MongoTempalte,还有其他的见官网

	3.使用Spring data Repository来操作Mongodb
		1.官方文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/#repositories
		

		---------------------------------------------------------------Repository接口操作Mongodb--------------------------------------------------------------------
		2.定义Repository接口来操作MongoDB：
			1.定义实体：
				1.定义实体的注解:
					@Id - 用于字段级别，标记这个字段是一个主键，默认生成的名称是“_id”
						用@Id（org.springframework.data.annotation.Id）注释的属性或字段映射到该_id字段。
						没有注释但命名id映射到该_id字段的属性或字段。
						
						关于插入：
							插入或保存时，如果Id未设置属性，则假设其值将由数据库自动生成。
							因此，ObjectId要成功自动生成，您的类中的Id属性或字段的类型必须是a String，an ObjectId或a BigInteger。


					@Document - 用于类，以表示这个类需要映射到数据库，您也可以指定映射到数据库的集合名称

					@DBRef - 用于字段，以表示它将使用com.mongodb.DBRef进行存储。

					@Indexed - 用于字段，表示该字段需要如何创建索引

					@CompoundIndex - 用于类，以声明复合索引

					@GeoSpatialIndexed - 用于字段，进行地理位置索引

					@TextIndexed - 用于字段，标记该字段要包含在文本索引中

					@Language - 用于字段，以设置文本索引的语言覆盖属性。

					@Transient - 默认情况下，所有私有字段都映射到文档，此注解将会去除此字段的映射

					@PersistenceConstructor - 标记一个给定的构造函数，即使是一个protected修饰的，在从数据库实例化对象时使用。构造函数参数通过名称映射到检索的DBObject中的键值。
					
					@Value - 这个注解是Spring框架的一部分。在映射框架内，它可以应用于构造函数参数。这允许您使用Spring表达式语言语句来转换在数据库中检索的键值，然后再用它来构造一个域对象。为了引用给定文档的属性，必须使用以下表达式：@Value("#root.myProperty")，root要指向给定文档的根。

					@Field - 用于字段，并描述字段的名称，因为它将在MongoDB BSON文档中表示，允许名称与该类的字段名不同。

					@Version - 用于字段锁定，保存操作时检查修改。初始值是0，每次更新时自动触发。


			2.继承MongoRepository接口
				interface PersonRepository extends MongoRepository<类名, Id或主键类型> { … }
			
			3.继承PagingAndSortingRepository接口（最好使用）,该接口会自动注入bean：
				interface PersonRepository extends PagingAndSortingRepository<类名, Id或主键类型> { … }

				1.查询分页 + 排序：
					cartRepository.findAllByUserid(userid,PageRequest.of(0, 10,Sort.by(Direction.DESC,"updateTime")));

			4.通过继承以上的接口直接写方法，直接CURD数据库，不用实现方法，如：
				方法命名模板:
					1.查找:findBy字段名称
					2.删除:removeBy字段名称
					3.统计:countBy字段名称
					4.还可以通过运算符or,and来命名，如果命名错误会有提示
					5.distinct:findDistinctPeople
					6.携带分页的参数：
						Page<User> findByUserName(String userName, Pageable pageable);

					7.携带排序的参数:
						List<User> findByUserName(String userName, Sort sort);	

					8.限制结果的数量的方法名称：
						findFirstByOrderByLastnameAsc：查询第一个数据，并且是升序的排序
						findFirst10ByLastname：查询从最大值开始返回的10行数据
				
				如：User findByUserName(String userName);	//直接通过userName查找，只需要定义这个方法就行
				
				1.查询方法的关键字：
					After
						如：findByBirthdateAfter(Date date)					
						逻辑结果{"birthdate" : {"$gt" : date}}

					GreaterThan
						如：findByAgeGreaterThan(int age)
						逻辑结果{"age" : {"$gt" : age}}

					GreaterThanEqual
						如：findByAgeGreaterThanEqual(int age)
						逻辑结果：{"age" : {"$gte" : age}}

					Before
						如：findByBirthdateBefore(Date date)
						逻辑结果{"birthdate" : {"$lt" : date}}

					LessThan
						如：findByAgeLessThan(int age)
						逻辑结果{"age" : {"$lt" : age}}

					LessThanEqual
						如：findByAgeLessThanEqual(int age)
						逻辑结果{"age" : {"$lte" : age}}

					Between
						如：findByAgeBetween(int from, int to)
						逻辑结果{"age" : {"$gt" : from, "$lt" : to}}

					In
						findByAgeIn(Collection ages)
						逻辑结果{"age" : {"$in" : [ages…​]}}

					NotIn
						findByAgeNotIn(Collection ages)
						逻辑结果{"age" : {"$nin" : [ages…​]}}

					IsNotNull, NotNull
						findByFirstnameNotNull()
						逻辑结果{"firstname" : {"$ne" : null}}

					IsNull, Null
						findByFirstnameNull()
						逻辑结果{"firstname" : null}

					Like, StartingWith, EndingWith
						findByFirstnameLike(String name)
						逻辑结果{"firstname" : name} (name as regex)

					NotLike, IsNotLike
						findByFirstnameNotLike(String name)
						逻辑结果{"firstname" : { "$not" : name }} (name as regex)

					Containing on String
						findByFirstnameContaining(String name)
						逻辑结果{"firstname" : name} (name as regex)

					NotContaining on String
						findByFirstnameNotContaining(String name)
						逻辑结果{"firstname" : { "$not" : name}} (name as regex)

					Containing on Collection
						findByAddressesContaining(Address address)
						逻辑结果{"addresses" : { "$in" : address}}

					NotContaining on Collection
						findByAddressesNotContaining(Address address)
						逻辑结果{"addresses" : { "$not" : { "$in" : address}}}

					Regex
						findByFirstnameRegex(String firstname)
						逻辑结果{"firstname" : {"$regex" : firstname }}

					(No keyword)
						findByFirstname(String name)
						逻辑结果{"firstname" : name}

					Not
						findByFirstnameNot(String name)
						逻辑结果{"firstname" : {"$ne" : name}}

					Near
						findByLocationNear(Point point)
						逻辑结果{"location" : {"$near" : [x,y]}}

					Near
						findByLocationNear(Point point, Distance max)
						逻辑结果{"location" : {"$near" : [x,y], "$maxDistance" : max}}

					Near
						findByLocationNear(Point point, Distance min, Distance max)
						逻辑结果{"location" : {"$near" : [x,y], "$minDistance" : min, "$maxDistance" : max}}

					Within
						findByLocationWithin(Circle circle)
						逻辑结果{"location" : {"$geoWithin" : {"$center" : [ [x, y], distance]}}}

					Within
						findByLocationWithin(Box box)
						逻辑结果{"location" : {"$geoWithin" : {"$box" : [ [x1, y1], x2, y2]}}}

					IsTrue, True
						findByActiveIsTrue()
						逻辑结果{"active" : true}

					IsFalse, False
						findByActiveIsFalse()
						逻辑结果{"active" : false}

					Exists
						findByLocationExists(boolean exists)
						逻辑结果{"location" : {"$exists" : exists }}

				2.删除方法关键字：
					上表中的关键字关键字可以与delete…By或一起使用remove…By来创建删除匹配文档的查询。

				3.Repository 支持的返回类型，见文档：
					https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/#repository-query-return-types
				4.查询返回指定字段：
					使用field来指定
					例子：
					@Query(fields="{'status':1,'sold':1}")
					Product findByItemId(String id);
				5.自定义查询，查询所有数据命名的方法：

					//将两个属性的值赋到Product里
					@Query(fields="{'status':1,'sold':1}")		
					List<Product> findAllBy(Pageable page,Sort sort)	

					//返回单个属性，估计返回的是JSON格式
					@Query(fields="{'itemId':}1")		
					List<String> findAllBy(Pageable page,Sort sort)	

					例子：注意,以上
						1.Page<User> users = repository.findAll(PageRequest.of(1, 20));

						2.cartRepository.findAllBy(PageRequest.of(0, 10), Sort.by(Direction.DESC,"update_time"));
				6.MongoDB会话



------------------------------------------------------------------------MongoTemplate操作Mongodb-----------------------------------------------------------------------------
		3.使用MongoTemplate来操作Mongodb:
			api文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/api/
			1.MongoOperations,MongoOperations 是实现MongoTemplate的接口
				插入：
					插入或保存时，如果Id未设置属性，则假设其值将由数据库自动生成。
					因此，ObjectId要成功自动生成，您的类中的Id属性或字段的类型必须是a String，an ObjectId或a BigInteger。

			2.批量插入：MongoTemplate.insertAll(Collection<? extends Object> objectsToSave)
   
			3.更新：
				MongoTemplate.updateMulti(Query query, Update update, Class<?> entityClass)
				例子：WriteResult wr = mongoTemplate.updateMulti(new Query(where("accounts.accountType").is(Account.Type.SAVINGS)),
									new Update().inc("accounts.$.balance", 50.00), Account.class);

				update对象的方法：
					官方文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/

					Update addToSet (String key, Object value) 使用$addToSetupdate修饰符添加addToSet Update

					Update currentDate (String key) 使用$currentDateupdate修饰符更新

					Update currentTimestamp (String key) 使用$currentDate更新修饰符更新$type timestamp

					Update inc (String key, Number inc) 使用$inc更新修饰符更新

					Update max (String key, Object max) update使用$max更新修饰符

					Update min (String key, Object min) 使用$minupdate修饰符更新

					Update multiply (String key, Number multiplier)使用$mul更新修饰符乘以更新

					Update pop (String key, Update.Position pos) 使用$popupdate修饰符更新

					Update pull (String key, Object value) 使用$pull更新修饰符拉取更新

					Update pullAll (String key, Object[] values) 使用$pullAllupdate修饰符进行pullAll 更新

					Update push (String key, Object value) 使用$push更新修饰符推送更新

					Update pushAll (String key, Object[] values) 使用$pushAllupdate修饰符更新

					Update rename (String oldName, String newName) 使用$rename更新修饰符重命名更新

					Update set (String key, Object value)使用$set更新修饰符设置更新

					Update setOnInsert (String key, Object value) 使用$setOnInsertupdate修饰符更新

					Update unset (String key) 使用$unset更新修饰符更新

					例子：
					// { $push : { "category" : { "$each" : [ "spring" , "data" ] } } }
					new Update().push("category").each("spring", "data")

					// { $push : { "key" : { "$slice" : 5 , "$each" : [ "Arya" , "Arry" , "Weasel" ] } } }
					new Update().push("key").slice(5).each(Arrays.asList("Arya", "Arry", "Weasel"));


				更新插入，如果找不到就插入，找到就跟新：
					template.upsert(query(where("ssn").is(1111).and("firstName").is("Joe").and("Fraizer").is("Update")), update("address", addr), Person.class);

			
			4.查找和更新方法，即更新文档并返回旧文档或新更新的文档
				<T> T findAndModify(Query query, Update update, FindAndModifyOptions options, Class<T> entityClass);
					设置参数，返回更新的文档：FindAndModifyOptions.options().returnNew(true);
				
				<T> T findAndModify(Query query, Update update, Class<T> entityClass);		//返回没有更新前的文档

			5.查找和替换文档，替换整体的最直接的方法Document是通过它id使用该save方法。然而，这可能并不总是可行的。findAndReplace提供了一种替代方案，允许通过简单查询识别要替换的文档。

				Optional<User> result = template.update(Person.class)      		//指定要更新的类
				    .matching(query(where("firstame").is("Tom")))          		//给定域类型映射的实际匹配查询。提供sort，fields并collation通过查询设置。
				    .replaceWith(new Person("Dick"))
				    .withOptions(FindAndReplaceOptions.options().upsert()) 
				    .as(User.class)                                        
				    .findAndReplace();       
			6.乐观锁，
				官方文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/
				1.乐观锁定需要设置WriteConcern为ACKNOWLEDGED。否则OptimisticLockingFailureException可以默默吞噬。

				2.直接在实体里添加version属性即可 
					@Version Long version;           
					直接用API保存，两次同时保存会直接报错，如：
						template.save(daenerys);                                                              
						template.save(tmp); // throws OptimisticLockingFailureException    


			7.查询：
				mongodbTemplate的find...方法都需要query对象，而query又需要Criteria（判断）对象， 
				如：
					Criteria c = new Criteria();
					c.where("username").is("1040978586").and("password").is("13379959770");
					
					mongoTemplate.find(Query.query(c),ModelAttr.class);   

				
				Criteria对象API：
					文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/
					详见文档的10.6

					Criteria all (Object o) 使用$all运算符创建标准

					Criteria and (String key) 链接添加到当前并返回新创建的链接CriteriakeyCriteria

					Criteria andOperator (Criteria…​ criteria)使用$and运算符为所有提供的条件创建和查询（需要MongoDB 2.0或更高版本）

					Criteria elemMatch (Criteria c) 使用$elemMatch运算符创建标准

					Criteria exists (boolean b) 使用$exists运算符创建标准

					Criteria gt (Object o) 使用$gt运算符创建标准

					Criteria gte (Object o) 使用$gte运算符创建标准

					Criteria in (Object…​ o) 使用$in运算符为varargs参数创建标准。

					Criteria in (Collection<?> collection)使用$in运算符使用集合创建标准

					Criteria is (Object o) 使用字段匹配（{ key:value }）创建标准。如果指定的值是文档，则文档的顺序和文档中的完全相等很重要。

					Criteria lt (Object o) 使用$lt运算符创建标准

					Criteria lte (Object o) 使用$lte运算符创建标准

					Criteria mod (Number value, Number remainder) 使用$mod运算符创建标准

					Criteria ne (Object o) 使用$ne运算符创建标准

					Criteria nin (Object…​ o) 使用$nin运算符创建标准

					Criteria norOperator (Criteria…​ criteria) 使用$nor运算符为所有提供的条件创建或查询

					Criteria not () 使用$not影响直接跟随子句的元运算符创建标准

					Criteria orOperator (Criteria…​ criteria) 使用$or运算符为所有提供的条件创建或查询

					Criteria regex (String re) 使用a创建标准$regex

					Criteria size (int s) 使用$size运算符创建标准

					Criteria type (int t) 使用$type运算符创建标准

					Criteria matchingDocumentStructure (MongoJsonSchema schema) 使用$jsonSchema运算符为JSON模式条件创建条件。$jsonSchema只能应用于查询的顶级而不是特定于属性。使用properties模式的属性来匹配嵌套字段。

					Criteria bits() 是通往MongoDB的按位的查询运算符等$bitsAllClear。

					Criteria within (Circle circle) 使用$geoWithin $center运算符创建地理空间标准。

					Criteria within (Box box)使用$geoWithin $box操作创建地理空间标准。

					Criteria withinSphere (Circle circle) 使用$geoWithin $center运算符创建地理空间标准。

					Criteria near (Point point) 使用$near操作创建地理空间标准

					Criteria nearSphere (Point point) 使用$nearSphere$center操作创建地理空间标准。这仅适用于MongoDB 1.7及更高版本。

					Criteria minDistance (double minDistance)使用该$minDistance操作创建地理空间标准，以便与$ near一起使用。

					Criteria maxDistance (double maxDistance) 使用该$maxDistance操作创建地理空间标准，以便与$ near一起使用。

				Query对象：
					Query addCriteria (Criteria criteria) 用于向查询添加其他条件

					Field fields () 用来定义字段被包括在查询结果中

					Query limit (int limit) 用于限制返回的结果所提供的限制的大小（用于寻呼）

					Query skip (int skip)用于跳过结果中提供的文档数（用于分页）

					Query with (Sort sort) 用于为结果提供定义排序


			8.根据实例(example)来查询，更骚的，
				文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/
					详见文档的10.7
				1.需要接口继承QueryByExampleExecutor接口
					如：public interface ModelAttrRepository extends QueryByExampleExecutor<ModelAttr>


1.通过java-mongodb-driver来操作Mongodb：
		1.通过MongoTemplate获取Mongo集合，MongoCollection：
				MongoCollection collection = mongoTemplate.getCollection("user");

		2.Filter过滤器，实现BSON的类
			1.运算的方法：
				eq：匹配等于指定值的值。
				gt：匹配大于指定值的值。
				gte：匹配大于或等于指定值的值。
				lt：匹配小于指定值的值。
				lte：匹配小于或等于指定值的值。
				ne：匹配所有不等于指定值的值。
				in：匹配数组中指定的任何值。
				nin：匹配数组中指定的值。

			2.逻辑运算符方法包括：
				and：使用逻辑AND连接过滤器，并选择与两个过滤器的条件匹配的所有文档。
				or：使用逻辑OR连接过滤器，并选择符合任一过滤条件的所有文档。
				not：反转查询表达式的效果并选择与筛选器不匹配的文档。
				nor：使用逻辑NOR连接过滤器，并选择无法匹配两个过滤器的所有文档。

			3.数组运算符方法包括：
				all：匹配包含查询中指定的所有元素的数组
				elemMatch：如果数组字段中的元素与所有指定的$ elemMatch条件匹配，则选择文档
				size：如果数组字段是指定大小，则选择文档

			4.元素运算符方法包括：
				exists：选择具有指定字段的文档。
				type：如果字段是指定类型，则选择文档。

			5.评估运算符方法包括：
				mod：对字段的值执行模运算，并选择具有指定结果的文档。
				regex：选择值与指定正则表达式匹配的文档。
				text：选择与全文搜索表达式匹配的文档。
				where：匹配满足JavaScript表达式的文档。

			6.MongoDB 3.2提供的按位查询运算符包括：
				bitsAllSet：选择设置字段的所有指定位的文档（即1）。
				bitsAllClear：选择字段的所有指定位清零的文档（即0）。
				bitsAnySet：选择至少设置一个字段的指定位的文档（即1）。
				bitsAnyClear：选择字段中至少有一个指定位清零的文档（即0）

			7.地理空间操作员方法包括：
				geoWithin：选择包含字段的所有文档，该字段的值是GeoJSON几何体，该几何体位于边界GeoJSON几何体内。
				geoWithinBox：选择包含具有完全位于指定框内的网格坐标数据的字段的所有文档。
				geoWithinPolygon：选择包含具有完全位于指定多边形内的网格坐标数据的字段的所有文档。
				geoWithinCenter：选择包含具有完全位于指定圆内的网格坐标数据的字段的所有文档。
				geoWithinCenterSphere：使用球面几何选择包含具有完全位于指定圆内的地理空间数据（GeoJSON或传统坐标对）的字段的几何。
				geoIntersects：选择与GeoJSON几何体相交的几何。2dsphere索引支持$ geoIntersects。
				near：返回点附近的地理空间对象。需要地理空间索引。2dsphere和2d指数支持$ near。
				nearSphere：返回球体上某点附近的地理空间对象。需要地理空间索引。2dsphere和2d索引支持$ nearSphere。


		5.以文件的方式读写MongoDB
			文档：http://mongodb.github.io/mongo-java-driver/3.10/bson/readers-and-writers/


2.事务,需要配置Mongodb复制集
	1.使用注解的方式来配置事务：
		1.注册事务管理器bean：
			@Bean
		    MongoTransactionManager transactionManager(MongoDbFactory dbFactory) {  
		        return new MongoTransactionManager(dbFactory);
		    }

		2.直接将@Transaction注解在方法上即可