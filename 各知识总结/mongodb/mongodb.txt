Mongodb简介:
	1.快速开发Web应用
	2.Mongodb的数据模型是面相文档的，类似于JSON结构，即BSON
	3.官网文档：https://docs.mongodb.com/manual/tutorial/getting-started/


概念：
	1.数据库：一个仓库，仓库可以存放集合
	2.集合：类似于数组，在集合中可以存放文档
	3.文档：文档数据库中的最小单位，我们存储和操作的内容都是文档

指令：
	show dbs
	show databases
		-显示当前所有的数据库
	show collections
		-显示数据库中所有的集合

	user 数据库名
		-进入数据库

	use 数据库名
		-创建数据库，进入数据库

	db
		-代表当前数据库

	注意：
		一般数据库和集合都不需要手动创建，只要在插入文档的时候会自动创建。

	CRUD操作：
		CRUD文档：https://docs.mongodb.com/manual/crud/

		Mongodb的所有函数方法:https://docs.mongodb.com/manual/reference/method/js-collection/

		集合（collection）方法:
			db.collection.insert()		在集合中创建新文档。
			db.collection.insertOne()	在集合中插入新文档。
			db.collection.insertMany()	在集合中插入几个新文档。

			db.collection.find()				对集合或视图执行查询并返回游标对象。
			db.collection.findAndModify()		以原子方式修改并返回单个文档。
			db.collection.findOne()				执行查询并返回单个文档。
			db.collection.findOneAndDelete()	查找单个文档并将其删除。
			db.collection.findOneAndReplace()	查找单个文档并替换它。
			db.collection.findOneAndUpdate()	查找单个文档并进行更新。

			db.collection.update()			修改集合中的文档。
			db.collection.updateOne()		修改集合中的单个文档。
			db.collection.updateMany()		修改集合中的多个文档。
			db.collection.remove()			从集合中删除文档。

			db.collection.remove()		从集合中删除文档。
			db.collection.deleteOne()	删除集合中的单个文档。
			db.collection.deleteMany()	删除集合中的多个文档。

			db.collection.aggregate()	提供对聚合管道的访问。
			db.collection.bulkWrite()	提供批量写入操作功能。

			db.collection.count()			返回文档的计数。

			db.collection.dataSize()		返回集合的大小。
			db.collection.createIndex()		在集合上构建索引。
			db.collection.createIndexes()	在集合上构建一个或多个索引。

			db.collection.explain()			返回有关各种方法的查询执行的信息。

			db.collection.getIndexes()				返回描述集合上现有索引的文档数组。
			db.collection.getShardDistribution()	对于分片群集中的集合，db.collection.getShardDistribution()报告块分布的数据。
			db.collection.getShardVersion()			分片群集的内部诊断方法。

			db.collection.aggregate()		更复杂的数据集合。

		cursor（也是文档方法，）方法
			db.collection.find().*;


		1.插入文档：
			Api:
				db.<collection>.insert(doc)		:将单个文档或多个文档插入集合中。
				db.<collection>.insertOne()		:将单个文档插入到集合中。
				db.<collection>.insertMany() 	:将多个 文档插入集合中。

				如：db.students.insert( {'name':"德莱文"} )

			注：
				1.在插入时，会默认添加"_id"属性，是为了保证唯一性，也可以自己给“_id”赋值，建议使用自带的

		2.查询文档:
			1.Api:
				db.<collection>.find();		:返回符合条件的所有文档
				db.<collection>.findOne()	:返回符合条件的第一个文档

			2.查询语法：
				db.collection.findOne(query, projection);
				参数：
					query：查询条件
					projection:投影(即视图)


			3.查询返回指定字段：
				例子：
					db.inventory.insertMany( [
					  { item: "journal", status: "A", size: { h: 14, w: 21, uom: "cm" }, instock: [ { warehouse: "A", qty: 5 } ] },
					  { item: "notebook", status: "A",  size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "C", qty: 5 } ] },
					  { item: "paper", status: "D", size: { h: 8.5, w: 11, uom: "in" }, instock: [ { warehouse: "A", qty: 60 } ] },
					  { item: "planner", status: "D", size: { h: 22.85, w: 30, uom: "cm" }, instock: [ { warehouse: "A", qty: 40 } ] },
					  { item: "postcard", status: "A", size: { h: 10, w: 15.25, uom: "cm" }, instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
					]);

				1.返回指定字段,包括_id
					db.inventory.find( { status: "A" }, { item: 1, status: 1 } )
					等同于SQL
					SELECT _id, item, status from inventory WHERE status = "A"

				2.返回指定字段,不包括_id
					通过将_id设置0为投影中的结果来从结果中删除该字段
					db.inventory.find( { status: "A" }, { item: 1, status: 1, _id: 0 } )
					等同于SQL
					SELECT item, status from inventory WHERE status = "A"

				3.返回全部字段，但是排除其中一些字段
					排除status,instock字段
					db.inventory.find( { status: "A" }, { status: 0, instock: 0 } )

				4.返回指定字段,返回指定字段和内嵌文档的指定字段,返回size对象下的uom字段
					db.inventory.find(
					   { status: "A" },
					   { item: 1, status: 1, "size.uom": 1 }
					)

				5.返回项目中特定索引的数组元素
					返回instock元素的最有一个索引的数组,(slice:-1)
					db.inventory.find( { status: "A" }, { item: 1, status: 1, instock: { $slice: -1 } } )


			4.查询数组：
				1.普通数组查询：https://docs.mongodb.com/manual/tutorial/query-arrays/

				例子：
				db.inventory.insertMany([
				   { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
				   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
				   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
				   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
				   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
				]);

					1.查询2个值,并且指定顺序的数组
						db.inventory.find( { tags: ["red", "blank"] } )

					2.查询一个同时包含两个元素的数组，不考虑顺序和其他元素
						db.inventory.find( { tags: { $all: ["red", "blank"] } } )

					3.返回其中之一的数组：
						db.inventory.find( { tags: "red" } )

					4.要在array字段中的元素上指定条件，选择指定字段，选择操作符，选择值
						{ <array field>: { <operator1>: <value1>, ... } }

					5.查询数组dim_cm包含至少一个大于25的元素的文档
						db.inventory.find( { dim_cm: { $gt: 25 } } )

					6.使用数组元素上的复合过滤条件查询数组
						大于15小于20的元素
						db.inventory.find( { dim_cm: { $gt: 15, $lt: 20 } } )

					7.查询满足多个条件的数组元素
						dim_cm数组包含至少一个同时大于22和小于30的元素
						db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )

					8.查询数组中第二个元素dim_cm大于25的文档
						db.inventory.find( { "dim_cm.1": { $gt: 25 } } )

					9.通过数组的长度查询数组
						查询数组长度为3的数组
						db.inventory.find( { "tags": { $size: 3 } } )



				2.嵌入式数组查询:https://docs.mongodb.com/manual/tutorial/query-array-of-documents/

				例子：
					db.inventory.insertMany( [
					   { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
					   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
					   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
					   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
					   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
					]);


					1.查询数组中的元素相匹配的文档,《《字段顺序》》也必须相匹配,不然不行
					正确例子：db.inventory.find( { "instock": { warehouse: "A", qty: 5 } } )
					错误例子：db.inventory.find( { "instock": { qty: 5, warehouse: "A" } } )	(顺序不正确)

					2.在嵌入文档数组中的字段上指定查询条件
						查询instock数组包含qty其值小于或等于20的元素的所有文档
						db.inventory.find( { 'instock.qty': { $lte: 20 } } )

						查询instock数组中第一行包含qty其值小于或等于20的元素的所有文档
						db.inventory.find( { 'instock.0.qty': { $lte: 20 } } )

					3.$elemMatch运算符
						使用$elemMatch运算符可以在“一组嵌入式文档上指定多个条件”，以使“至少一个嵌入式”文档满足所有指定条件。
						
						单个嵌套文档在嵌套字段上满足多个查询条件
						
						查询instock数组具有“至少一个有嵌入式文档”，该文档“同时包含 qty等于5的字段和warehouse等于的A”
						db.inventory.find( { "instock": { $elemMatch: { qty: 5, warehouse: "A" } } } )

						其中instock数组具有“至少一个嵌入式文档”，该嵌入式文档“包含qty大于10和小于或等于的字段20”
						db.inventory.find( { "instock": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )

					4.不使用elemeMatch的方法：
						查询instock数组中,qty的值大于10小于20的数组的所有文档,至少一个嵌入文档
						db.inventory.find( { "instock.qty": { $gt: 10,  $lte: 20 } } )

						查询instock数组中,qty=5，warehouse=A的元素,至少一个嵌入文档
						db.inventory.find( { "instock.qty": 5, "instock.warehouse": "A" } )


				3.引用式嵌套查询
					1.引用式嵌套查询：需分多次查询
 					如：
 						{
						   "_id":ObjectId("52ffc33cd85242f436000001"),
						   "contact": "987654321",
						   "dob": "01-01-1991",
						   "name": "Tom Benzamin",
						   "address_ids": [
						      ObjectId("52ffc4a5d85242602e000000"),
						      ObjectId("52ffc4a5d85242602e000001")
						   ]
						}
 				

			5.查询空或者不存在的字段
				例子：
				db.inventory.insertMany([
				   { _id: 1, item: null },
				   { _id: 2 }
				])

				1.查询字段为Null或者字段不存在的文档
				db.inventory.find( { item: null } )

				2.查询返回只有“指定字段类型”的文档
				注：BSON字段类型：https://docs.mongodb.com/manual/reference/bson-types/
				db.inventory.find( { item : { $type: 10 } } )

				3.查询不包含指定字段的文档，不存咋指定字段的文档
				查询不包含item字段的文档,即不存在
				db.inventory.find( { item : { $exists: false } } )







			6.查询运算符：
				语法:{ <field1>: { <operator1>: <value1> }, ... }
				运算符(operator):
					$in:相当于'='
					$lt:相当于'and'
					$or:相当于'or'
					$lt:小于
					$gt:大于

					例子：
						//查询年龄=11或年龄小于10的用户
						dp.user.find({$or:[{'age':11},{age:{$lt:10}}]});	

			查询运算符：
				比较
				要比较不同的BSON类型值，请参阅指定的BSON比较顺序。
					名称	描述
					$eq	匹配等于指定值的值。
					$gt	匹配大于指定值的值。
					$gte	匹配大于或等于指定值的值。
					$in	匹配数组中指定的任何值。
					$lt	匹配小于指定值的值。
					$lte	匹配小于或等于指定值的值。
					$ne	匹配所有不等于指定值的值。
					$nin	不匹配数组中指定的任何值。

				逻辑
					名称	描述
					$and	使用逻辑连接查询子句AND将返回与两个子句的条件匹配的所有文档。
					$not	反转查询表达式的效果并返回与查询表达式不匹配的文档。
					$nor	使用逻辑连接查询子句NOR将返回所有无法匹配两个子句的文档。
					$or	使用逻辑连接查询子句OR将返回与任一子句的条件匹配的所有文档。

				元素
					名称	描述
					$exists	匹配具有指定字段的文档。
					$type	如果字段是指定类型，则选择文档。
				求值
					名称	描述
					$expr	允许在查询语言中使用聚合表达式。
					$jsonSchema	根据给定的JSON模式验证文档。
					$mod	对字段的值执行模运算，并选择具有指定结果的文档。
					$regex	选择值与指定正则表达式匹配的文档。
					$text	执行文本搜索。
					$where	匹配满足JavaScript表达式的文档。
				地理空间
					名称	描述
					$geoIntersects	选择与GeoJSON几何体相交的几何。该2dsphere索引支持 $geoIntersects。
					$geoWithin	选择边界GeoJSON几何体内的几何。该2dsphere和2D索引支持 $geoWithin。
					$near	返回点附近的地理空间对象。需要地理空间索引。该2dsphere和2D索引支持 $near。
					$nearSphere	返回球体上某点附近的地理空间对象。需要地理空间索引。该2dsphere和2D索引支持 $nearSphere。
				数组
					名称	描述
					$all	匹配包含查询中指定的所有元素的数组。
					$elemMatch	如果数组字段中的元素与所有指定$elemMatch条件匹配，则选择文档。
					$size	如果数组字段是指定大小，则选择文档。
				按位
					名称	描述
					$bitsAllClear	匹配数值或二进制值，其中一组位位置都具有值0。
					$bitsAllSet	匹配数值或二进制值，其中一组位位置都具有值1。
					$bitsAnyClear	匹配数值或二进制值，其中来自一组位位置的任何位的值都为0。
					$bitsAnySet	匹配数值或二进制值，其中来自一组位位置的任何位的值都为1。
				评论
					名称	描述
					$comment	向查询谓词添加注释。

				投影运算符(即,返回字段的值运算符)
					文档：https://docs.mongodb.com/manual/reference/operator/projection/positional/
					名称	描述
					$	投影数组中与查询条件匹配的第一个元素。
					$elemMatch	投影数组中与指定$elemMatch条件匹配的第一个元素。
					$meta	投影在$text操作期间分配的文档分数。
					$slice	限制从数组投射的元素数量。支持跳过和限制切片。

		3.修改更新:
			1.简单介绍
				update():只会更新一行，更新或替换与指定过滤器匹配的单个文档，或更新与指定过滤器匹配的所有文档。
				db.collection.updateMany()	：更新与指定过滤器匹配的所有文档。
					注：更新多个必须还有原子操作符,如($set)
				db.collection.replaceOne()															
					注 ：即使多个文档可能与指定的过滤器匹配，也最多替换与指定过滤器匹配的单个文档
				db.collection.updateOne()	
					注：即使多个文档可能与指定的过滤器匹配，也最多更新与指定过滤器匹配的单个文档。

				原子操作符：
					$set:用来修改和添加指定的属性
					$unset:删除某个属性

				例：
				update(查询条件,新对象);
					注：新对象会替换旧对象，是替换，而不是修改部分	
					如:db.person.update({'name':'德莱文'},{'name':'德莱文','pos':'adc'})

				update(查询条件,{$set:{}})
					update({'name':'李四'},{$set:{'name':'张三'}})


			2.语法和例子：
				db.collection.updateOne(<filter>, <update>, <options>)
				db.collection.updateMany(<filter>, <update>, <options>)
				db.collection.replaceOne(<filter>, <update>, <options>)

				更新运算符：https://docs.mongodb.com/manual/reference/operator/update/

				1.更新单个文档：
					db.inventory.updateOne(
					   { item: "paper" },
					   {
					     $set: { "size.uom": "cm", status: "P" },
					     $currentDate: { lastModified: true }
					   }
					)

				2.更新多个文档
					db.inventory.updateMany(
					   { "qty": { $lt: 50 } },
					   {
					     $set: { "size.uom": "in", status: "P" },
					     $currentDate: { lastModified: true }
					   }
					)

				3.替换一个文档。
					在替换文档中，_id由于该_id字段是不可变的，因此可以省略该字段；但是，如果您包含该_id字段，则该 字段必须与当前值具有相同的值

					db.inventory.replaceOne(
					   { item: "paper" },
					   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 40 } ] }
					)
				4.其他更新文档的方法：
					文档：https://docs.mongodb.com/manual/reference/update-methods/
					db.collection.findOneAndReplace()。
					db.collection.findOneAndUpdate()。
					db.collection.findAndModify()。
					db.collection.save()。
					db.collection.bulkWrite()。

			更新运算符：
				字段

					$currentDate	将字段的值设置为当前日期，可以是Date或Timestamp。
					$inc	按指定的数量增加字段的值。
					$min	仅当指定的值小于现有字段值时才更新字段。
					$max	仅当指定的值大于现有字段值时才更新字段。
					$mul	将字段的值乘以指定的量。
					$rename	重命名字段。
					$set	设置文档中字段的值。
					$setOnInsert	如果更新导致文档插入，则设置字段的值。对修改现有文档的更新操作没有影响。
					$unset	从文档中删除指定的字段。

				数组
					名称	描述
					$	充当占位符以更新与查询条件匹配的第一个元素。
					$[]	充当占位符以更新数组中与查询条件匹配的文档中的所有元素。
					$[<identifier>]	充当占位符以更新与arrayFilters匹配查询条件的文档的条件匹配的所有元素。
					$addToSet	仅当数组中尚不存在元素时才将元素添加到数组中。
					$pop	删除数组的第一个或最后一个项目。
					$pull	删除与指定查询匹配的所有数组元素。
					$push	将项添加到数组。
					$pullAll	从数组中删除所有匹配的值。
					修饰符
					名称	描述
					$each	修改$push和$addToSet运算符以附加多个项目以进行阵列更新。
					$position	修改$push运算符以指定数组中添加元素的位置。
					$slice	修改$push运算符以限制更新数组的大小。
					$sort	修改$push运算符以重新排序存储在数组中的文档。
				按位
					名称	描述
					$bit	执行按位AND，OR和XOR更新整数值。

		4.删除文档：
			https://docs.mongodb.com/manual/tutorial/remove-documents/
			即使从集合中删除所有文档，删除操作也不会删除索引。
			语法：
				db.collection.deleteMany({过滤器})
			1.删除集合中的所有文档:
				db.collection.deleteMany({})

			2.删除指定条件的文档：
				db.collection.deleteMany({ <field1>: <value1>, ... })

			3.仅删除一个符合条件的文档
				db.inventory.deleteOne( { status: "D" } )



		5.批量写操作：
			1.MongoDB使客户端能够批量执行写操作。批量写入操作会影响单个集合。MongoDB允许应用程序确定批量写入操作所需的可接受的确认级别。

			2.bulkWrite()接受一组写入操作并执行每个操作。默认情况下，操作按顺序执行。

			3.db.collection.bulkWrite()可以在多文档事务中使用。

			4.bulkWrite支持以下下操作：
				insertOne
				updateOne
				updateMany
				replaceOne
				deleteOne
				deleteMany	

			5.语法：
				db.collection.bulkWrite(
				   [ <operation 1>, <operation 2>, ... ],
				   {
				      writeConcern : <document>,
				      ordered : <boolean>
				   }
				)
							
			

			6.例子：
				1.已知characters集合已经有以下文档：
					{ "_id" : 1, "char" : "Brisbane", "class" : "monk", "lvl" : 4 },
					{ "_id" : 2, "char" : "Eldon", "class" : "alchemist", "lvl" : 3 },
					{ "_id" : 3, "char" : "Meldane", "class" : "ranger", "lvl" : 3 }

				2.执行批量写操作：
				try {
				   db.characters.bulkWrite(
				      [
				         { insertOne :
				            {
				               "document" :
				               {
				                  "_id" : 4, "char" : "Dithras", "class" : "barbarian", "lvl" : 4
				               }
				            }
				         },

				         { insertOne :
				            {
				               "document" :
				               {
				                  "_id" : 5, "char" : "Taeln", "class" : "fighter", "lvl" : 3
				               }
				            }
				         },

				         { updateOne :
				            {
				               "filter" : { "char" : "Eldon" },
				               "update" : { $set : { "status" : "Critical Injury" } }
				            }
				         },

				         { deleteOne :
				            { "filter" : { "char" : "Brisbane"} }
				         },

				         { replaceOne :
				            {
				               "filter" : { "char" : "Meldane" },
				               "replacement" : { "char" : "Tanys", "class" : "oracle", "lvl" : 4 }
				            }
				         }
				      ]
				   );
				}
				catch (e) {
				   print(e);
				}

			7.批量插入分片集合的策略:大量的大容量插入操作（包括初始数据插入或常规数据导入）可能会影响分片群集的性能.对于批量插入，请考虑以下策略：
				详见文档：https://docs.mongodb.com/manual/core/bulk-write-operations/#overview
				1.预拆分集合:
					如果分片集合为空，则该集合只有一个初始块，它位于单个分片上。然后，MongoDB必须花一些时间来接收数据，创建拆分并将拆分的块分发到可用的分片。为了避免这种性能损失，您可以按照“拆分碎片中的拆分块中的说明”预先拆分集合 。

					“拆分碎片中的拆分块中的说明”：https://docs.mongodb.com/manual/tutorial/split-chunks-in-sharded-cluster/

				2.无序写入mongos:
					要提高对分片群集的写入性能，请使用 bulkWrite()可选参数ordered 设置为false。设置成无序写入。mongos可以尝试同时将写入发送到多个分片。对于空集合，首先按照分片群集中的分割块中的说明预分割集合 。

		6.重试写操作：
			1.简述：可重试写入允许MongoDB驱动程序在遇到网络错误或在 副本集或分片群集中找不到正常的主操作时，一次自动重试某些写入操作
			2.条件：
				1.可重试的写入需要副本集 或分片群集，并且不支持独立的，单个服务器运行，
				2.可重试写入需要支持文档级锁定的存储引擎
				3.集群中每个节点的MongoDB版本必须大于或等于3.6

			3.重试写入和多文档事务：
				1.事务提交和中止操作是可重试的写操作。如果提交操作或中止操作遇到错误，则MongoDB驱动程序将重试该操作一次，无论是否retryWrites将其设置为 false。
				2.启用重试写操作：只需要在启动mongo服务器指定选项
					mongo --retryWrites


		7.SQL映射成MongoDB解释：
			文档：https://docs.mongodb.com/manual/reference/sql-comparison/

			如查询文档文档：
				SQL:SELECT * FROM people
				Mongo:db.people.find()


		8.文本搜索(text Search)：
			1.概述：MongoDB支持执行字符串内容的文本搜索的查询操作。为了执行文本搜索，MongoDB使用 文本索引和$text运算符。
			2.注意：
				视图不支持text Search

			3.文本索引：
				1.MongoDB提供文本索引以支持对字符串内容的文本搜索查询。text索引可以包含任何值为字符串或字符串元素数组的字段。
				2.要执行文本搜索查询，您text的集合上必须有一个 索引。一个集合只能有一个 文本搜索索引，但是该索引可以涵盖多个字段。

			4.例子：
				1.集合：
					db.stores.insert(
					   [
					     { _id: 1, name: "Java Hut", description: "Coffee and cakes" },
					     { _id: 2, name: "Burger Buns", description: "Gourmet hamburgers" },
					     { _id: 3, name: "Coffee Shop", description: "Just coffee" },
					     { _id: 4, name: "Clothes Clothes Clothes", description: "Discount clothing" },
					     { _id: 5, name: "Java Shopping", description: "Indonesian goods" }
					   ]
					)

				2.创建索引：
					1.给name和description两个字段添加text索引
					2.db.stores.createIndex( { name: "text", description: "text" } )

				3.使用$text查询运算符对具有文本索引的集合执行文本搜索。
					1.$text将使用空格和大多数标点符号作为分隔符来OR标记搜索字符串，并对搜索字符串中的所有此类标记执行逻辑运算。
					db.stores.find( { $text: { $search: "java coffee shop" } } )

					2.以上会查询出3个文档分别是1，3，5

				4.搜索短语：
					1.而不是单词，需要用双引号括起来
					2.db.stores.find( { $text: { $search: "\"coffee shop\"" } } )

				5.单词排除：
					1.要排除一个单词，可以在前面加上一个“-”字符即可
					2.db.stores.find( { $text: { $search: "java shop -coffee" } } )

				6.排序：
					1.默认情况下，MongoDB将以未排序的顺序返回结果。文本搜索查询将为每个文档计算相关性分数，以指定文档与查询的匹配程度。匹配读越高,分数越高。
					2.要按相关性得分的顺序对结果进行排序，必须显式投影该字段并对其进行排序：$meta textScore

					3.查询：						
						db.stores.find(
						   { $text: { $search: "java coffee shop" } },
						   { score: { $meta: "textScore" } }
						).sort( { score: { $meta: "textScore" } } )

					4.结果：

					{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee", "score" : 2.25 }
					{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes", "score" : 1.5 }
					{ "_id" : 5, "name" : "Java Shopping", "description" : "Indonesian goods", "score" : 1.5 }




创建集合：
	1.自增长的集合


文档之间的关系：
	详见文档：https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/#data-modeling-example-one-to-many

	一对一：
		使用内嵌文档的方式，
		
		例子:一个丈夫对一个妻子:
			db.wifeAndHusband.insert([
				{
					wifeName:老婆,
					age:14,
					husband:{
						name:'老公',
						age:13
					}
				}
			])

	一对多 / 多对一：
		在"一"的一端添加"多"的一端的唯一字段即可

		例子：用户和地址，一个用户有多个地址

		地址Address:
			{
			   "_id":ObjectId("52ffc4a5d85242602e000000"),
			   "building": "22 A, Indiana Apt",
			   "pincode": 123456,
			   "city": "Los Angeles",
			   "state": "California"
			} 

		用户User:
			{
			   "_id":ObjectId("52ffc33cd85242f436000001"),
			   "contact": "987654321",
			   "dob": "01-01-1991",
			   "name": "Tom Benzamin",
			   "address_ids": [
			      ObjectId("52ffc4a5d85242602e000000"),
			      ObjectId("52ffc4a5d85242602e000001")
			   ]
			}
	多对多：
		和传统的SQL数据库一样，用额外的表来关联，有过有一方的数据量少，可以直接用嵌套
		例如:分类和商品
			

脚本：
	MongoDb可以使用JS语法，比如var来声明变量，如例：
		var user_id = db.users.find({username:'张三'})._id;		//查询获取user_id
		db.order.find({user_id:user_id})						//根据user_id来查询订单

索引/和查询优化：
	1.默认的_id索引：MongoDB 在创建集合期间在_id字段上 创建唯一索引。该索引可防止客户端插入具有相同字段值的两个文档。

	2.创建索引：https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex

		1.语法：db.collection.createIndex({background},{unique},{name})
		 //语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。

		2.例子，如：db.collection.createIndex({name:1})		给name字段添加索引

		3.createIndex() 接收可选参数
		background	Boolean	建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 "background" 可选参数。 "background" 默认值为false。
		unique		Boolean	建立的索引是否唯一。指定为true创建唯一索引。默认值为false.
		name		string	索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。
		dropDups	Boolean	3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false.
		sparse		Boolean	对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.
		expireAfterSeconds	integer	指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。
		v			index version	索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。
		weights		document	索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。
		default_language	string	对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语
		language_override	string	对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.



		1、查看集合索引
			db.col.getIndexes()
		2、查看集合索引大小
			db.col.totalIndexSize()
		3、删除集合所有索引
			db.col.dropIndexes()
		4、删除集合指定索引
			db.col.dropIndex("索引名称")

	查询优化：
		https://docs.mongodb.com/manual/reference/method/cursor.explain/#cursor.explain

MongoDB复制（副本集）：
	官方文档：https://docs.mongodb.com/manual/tutorial/deploy-replica-set/#overview

	1.MongoDB复制至少两个节点，一个是主节点，负责处理客户端请求，其余的是从节点，负责复制主节点上的数据

	2.主节点会将操作记录存储在oplog日志中（只记录写操作而不记录读操作），从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。

	3.MongoDB复制集（复制的集合，有多个成员）
		特点:
			N 个节点的集群
			任何节点可作为主节点
			所有写入操作都在主节点上
			自动故障转移
			自动恢复

		MongoDB复制集的角色类型：
			1.primary（标准节点）:参与主节点的选举，当自身宕机或者服务停止的时候会自动让出primary
			2.secondary(被动节点，次级节点)：只能成为second不参与选举，被设置为被动节点则不能参与选举
			3.arbiter(仲裁节点):负责投票选举，不存放数据，确保标准节点投票不会相同

	4.配置复制集，mongod.cfg:
		##复制集的名字，即一个复制的集合，所有成员的配置都一样
		replication:
   			replSetName: rs0

   		当在以上配置完成后，进入数据库可能会出错，提示：
   			意思是：因为SECONDARY是不允许读写的，如果非要解决，
	   			Server returned not master error.
				Message: not master and slaveOk=false
				Code: 13435

			解决：rs.slaveOk();

	5.在mongodb客户端执行以下命令	
		1.rs.initiate()在副本集成员0（_id:0）上运行。
			rs.initiate( {
			   _id : "rs0",
			   members: [
			      { _id: 0, host: "127.0.0.1:27017" },
			      { _id: 1, host: "127.0.0.1:27018" },
			   ]
			})

		2.rs.conf()：以显示副本集配置对象	
		3.rs.status()：来识别副本集的主，查看副本集的信息
		4.rs.isMaster()：查看Replica Sets状态

	6.将成员添加到副本集：


分片：https://www.runoob.com/mongodb/mongodb-sharding.html
	在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。
	当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。

	使用分片的原因：
		复制所有的写入操作到主节点
		延迟的敏感数据会在主节点查询
		单个副本集限制在12个节点
		当请求量巨大时会出现内存不足。
		本地磁盘不足
		垂直扩展价格昂贵

	分片集群结构主要有三个组件：
		Shard:
		用于存储实际的数据块，实际生产环境中一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障

		Config Server:
		mongod实例，存储了整个 ClusterMetadata，其中包括 chunk信息。

		Query Routers:
		前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用。




事务：
	https://docs.mongodb.com/manual/core/transactions/

	1.MongoDB对单个文档的操作是原子操作，因为您可以使用嵌入式文档和数组来捕获单个文档结构中的数据之间的关系，而不是跨多个文档和集合进行规范化，因此这种单文档原子性消除了许多实际用例对多文档事务的需求。
	
	2.对于多文档读写的原子性情况，MongoDB支持多文档事务，使用分布式事务，可以跨多个操作，集合，数据库，文档和分片使用事务。

	3.多文档事务和分布式事务
		分布式事务是指分片群集和副本集上的多文档事务。多文档事务（无论是在分片集群还是副本集上）也称为从MongoDB 4.2开始的分布式事务。
