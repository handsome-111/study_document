window：
	1.安装时，选择custom，自定义，然后下一步即可
	2.配置环境变量，将mongodb的bin目录添加到path即可
	3.创建文件夹：	C:\data\db	，必须是这样的格式，因为这是默认配置
	4.启动mongodb服务器:
		cmd:	mongod
		1.指定存储路径和端口：
			mongod --dbpath F:\mongodb\data\db	--port 10086

		2.后台运行mongodb服务：
			1.新建mongod.cfg,配置路径和日志:
				dbpath=F:\mongodb\data\db
				logpath=F:\mongodb\data\log\mongodb.log
			2.配置服务：
				1.mongod.exe  --config  "C:\handsome\MongoDB\mongod.cfg" --install --serviceName "MongoDB"
				2.然后再services.msc里就可以看到MongoDB服务了，点击启动运行即可
	5.测试链接mongodb服务器：
		cmd:mongo





1.配置文件选项：
	即mongod.cfg
	文档：https://docs.mongodb.com/manual/reference/configuration-options/

	1.security:配置安全，客户端采用用户密码登录
		文档：https://docs.mongodb.com/manual/tutorial/enable-authentication/

		1.1:创建用户：
			（1）进入admin数据库，
			（2）创建超级管理员
					db.createUser({user:"admin",pwd:"123456",roles:["root"]})
			（3）创建普通管理员（admin管理员在hdgj数据库下创建用户，而不是在admin数据库下）
					db.createUser({user:"hdgj",pwd:"123456",roles:[{role:'readWrite',db:'hdgj'}]})
			（4）查看所有的用户:show users
			（5）删除用户：db.dropUser("admin")
			（6）身份验证：
					1.连接后进行身份验证：
						语法：db.auth(<username>, <pwd>)
						例子：db.auth("admin","123456")  
					2.连接期间进行身份验证：
						语法：-u <username>-p--authenticationDatabase <database>
						例子：mongo --port 27017 -u “myTester”-- authenticationDatabase “test” -p



			role角色选项:
				1.root:只在admin数据库中使用，超级账号，超级权限
				2.read:允许用户读取指定数据库
				3.readWrite:允许用户读写指定数据库

		1.2配置文件配置:
			security:
				authorization: enabled

		1.3登录:mongo -u admin -p

	2.其他：
		fork=true             //后台启动
		logappend=true        //以添加而不是覆盖的方式书写日志，

2.服务器参数:
	文档：https://docs.mongodb.com/manual/reference/parameters/

3.数据库命令:
	文档：https://docs.mongodb.com/manual/reference/command/
	对当前数据库命令：
		db.runCommand( { <command> } )


	常用命令：
		1.插入文档：
			语法：
			db.COLLECTION_NAME.insert(document)

			例子：
			db.col.insert({title: 'MongoDB 教程', 
			    description: 'MongoDB 是一个 Nosql 数据库',
			    by: '菜鸟教程',
			    url: 'http://www.runoob.com',
			    tags: ['mongodb', 'database', 'NoSQL'],
			    likes: 100
			})


		2.更新文档：
			db.collection.update(
			   <query>,
			   <update>,
			   {
			     upsert: <boolean>,
			     multi: <boolean>,
			     writeConcern: <document>
			   }
			)

			参数说明：

			query : update的查询条件，类似sql update查询内where后面的。
			update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
			upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
			multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
			writeConcern :可选，抛出异常的级别。

		3.删除文档：
			db.collection.remove(
			   <query>,
			   {
			     justOne: <boolean>,
			     writeConcern: <document>
			   }
			)

			参数说明：
			query :（可选）删除的文档的条件。
			justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。
			writeConcern :（可选）抛出异常的级别。
						

			例如：删除指定ObjectID的文档：db.cart.remove({_id : ObjectId("5d985f8622f4e33e7cc50818")})
		
		4.查询文档：
			语法：
			db.collection.find(query, projection)
			参数说明：
			query ：可选，使用查询操作符指定查询条件
			projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。
4.复制集：
	1.配置复制集，mongod.cfg:
		##复制集的名字，即一个复制的集合，所有成员的配置都一样
		replication:
   			replSetName: rs0

   		当在以上配置完成后，进入数据库可能会出错，提示：
   			意思是：因为SECONDARY是不允许读写的，如果非要解决，
	   			Server returned not master error.
				Message: not master and slaveOk=false
				Code: 13435

			解决：rs.slaveOk();


	2.rs.initiate()在副本集成员0（_id:0）上运行。且需直接用Mongoshell来直接操作，而不是登录数据库
		rs.initiate( {
		   _id : "rs0",
		   members: [
		      { _id: 0, host: "127.0.0.1:27017" },
		      { _id: 1, host: "127.0.0.1:27018" },
		   ]
		})

		1.使用rs.conf()以显示副本集配置对象	
		2.使用rs.status()来识别副本集的主。

5.创建多个mongodb服务，
	1.额外创建文件夹Mongodb-2:
	
	2.有如下文件夹和文件:data,log和mongod.cfg
	
	3.编辑mongod.cfg,设置data和log文件夹路径即可
		storage:
  			dbPath: C:\handsome\MongoDB4.0\mongodb-2\data	

  		net:
		  port: 27018
		  bindIp: 127.0.0.1

		 systemLog:
		  destination: file
		  logAppend: true
		  path:  C:\handsome\MongoDB4.0\mongodb-2\log\mongod.log

	4.启动第二个mongo服务器：
		mongod --config "C:\handsome\MongoDB4.0\mongodb-2\mongod.cfg"
		mongod --config "C:\handsome-whj\MongoDB4.0\mongodb-2\mongod.cfg"


