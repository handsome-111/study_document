   Spring容器内部协作结构:
      Spring容器有:Bean定义注册表，Bean缓存池
	1.Spring容器Bean定义注册表，读取Bean的配置信息
	2.Bean实现类会根据Bean注册表实例化bean
	3.然后将Bean实例放入Spring容器的Bean缓存池中

1.基于XML的配置:
<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"	<!-- aop是自定义命名空间的简称，双引号里的是命名空间全称 -->
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context 				<!--命名空间全称-->
       http://www.springframework.org/schema/context/spring-context-4.0.xsd	<!-- 为每个命名空间指定具体的Schema文件-->
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
</beans>
	解释:
	  1.默认命名空间:没有空间名，用于Spring Bean的定义。
	  2.xsi 标准命名空间:这个命名空间用于为每个文档中的命名空间指定相应Schema样式文件，是W3C定义的标准命名空间。
	  3.aop命名空间:这个命名空间是Spring配置AOP的命名空间,就是自定义的命名空间
	  4.命名空间简称(别名)，全称(全限定名)都可以任意命名,但是要指定具体的Schema文件
	  5.这些xsd(Schema文件)文件存在于各个模块的JAR包中的config文件夹下





2.Bean的命名：
	(通常都是通过id为Bean指定唯一的名称)
	(1).<bean>里的id属性是唯一的,但可以有多个相同的name属性,但最后返回的将是后面的那个同名的bean，因为后面的覆盖了前面同名的bean。
	(2).如果id和name两个属性不指定,如<bean class="xxx.xxx.xxx.XY">,则Spring会自动将全限类名作为Bean的名称，getBean("xxx.xxx.xxx.XY")。

3.给属性注入
	注意:在获取Bean的时候，只注入一次Bean，也就是说不管你调用多少次getBean(""),一直都是一个对象,因为scope默认属性是singleton(单例模式),如果改成scope="prototype",会重新获得新对象。
	(1).属性注入要求Bean提供一个默认的构造方法(无参构造),并提供相应的set方法
	(2).<ref>元素里的属性详解:
		<1>.bean:该属性可以引用同一容器或父容器中的Bean。	
		<2>.local:该属性只能引用统一配置文件中的Bean。	
		<3>.parent:引用父容器中的Bean。		<ref parent="car"/>
		<4>.父,子容器的代码:
			ClasspathXmlApplicationContext pFactory=new ClassPathXmlApplicationContext(new String[]{"beans1.xml"});
			ApplicationContext factory=new ClassPathXmlApplicationContext(new String[]{"beans2.xml"},pFactory);
	(3).例子:
	  <bean id="boss" class="com.smart.ditype.Boss"/>
	  <bean id="car" class="com.smart.ditype.Car">
		<property name="maxSpeed"><value>200</value></property>
		<property name="brand"><value>黑色</value></property>
		<property name="boss">
			<ref bean="boss"/>
		</property>
		简化后:
		<property name="car" ref="car"/>
	  </bean>
	
	(4).匿名内部Bean:
	   <bean id="car" class="com.smart.ditype.Car">
		<property name="boss">
			<bean class="com.smart.attr.Car">
				<property name="maxSpeed" value="200"/>
				<property name="price" value="2000.00"/>
			</bean>
		</property>
	  </bean>

	(5).给集合类型属性注入:
	   <bean id="car" class="com.smart.ditype.Car">
		<property name="lists">
			<list>
				<value>看报</value>
				<value>赛车</value>
				<value>高尔夫</value>
			</list>
			
		</property>
		<property name="sets">
			<set>
				<value>看报</value>
				<value>赛车</value>
				<value>高尔夫</value
			</set>
		</property>

		<property name="maps">
			<map>
				<entry>
					<key><value>客户</value></key>
					<value>会见客户</value>
				</entry>
			</set>
		</property>
	</bean>

		注:当Map的键和值都是对象时:
		<map>
			<entry>
				<key><ref bean="keyBean"/></key>
				<ref bean="valueBean"/>
			</entry>
			或
			<entry key-ref="keyBean" value-ref="valueBean"/>

			<set>
				<ref bean="xx"/>
			</set>
		</map>
	  

4.给构造函数注入:
	(1).按类型匹配入参:
	    public Class Car{
		public Car(String brand,double price){}
	    }
	
		<bean id="car1" class="com.smart.ditype.Car">		
			<construstor-arg type="java.lang.String">
				<value>红色</value>
			</construstor>
			<construstor-arg type="double" value="20000"/>
		</bean>

        (2).按索引匹配入参:
		<bean id="car1" class="com.smart.ditype.Car">		
			<construstor-arg index="0" value="红旗"/>
			<construstor-arg index="1" value="红色"/>
			<construstor-arg index="2" value="20000"/>
		</bean>

	(3).联合使用类型和索引匹配入参:
		<bean id="car1" class="com.smart.ditype.Car">		
			<construstor-arg index="0" type="java.lang.String" value="红旗"/>
			<construstor-arg index="1" type="java.lang.String" value="红色"/>
			<construstor-arg index="2" type="int" value="20000"/>
		</bean>
	(4).工厂方法注入:
	   注:因为工厂类可以创建一个或多个目标类实例,工厂方法都是静态的,class为工厂类,factory-method为工厂类方法
		<bean id="car6" class="com.smart.ditype.CarFactory" factory-method="createCar"/> 
		
5.采用p命名空间的配置:
	(1).<bean id="car" class="com.smart.ditype.Car"
		p:brand="红旗"
		p:maxSpeed="200"
		p:proce="2000.00"/>
	    
	    <bean id="boss" class="com.smart.ditype.Car"
		p:car-ref="car"
		p:属性名-ref="Bean的名称"
		/>

6.给方法注入:
	<bean id="car" class="com.smart.Car"
       	p:brand="兰博基尼" p:price="2000" scope="prototype"
	/>
	<bean id="magicBoss" class="com.smart.injectfun.MagicBossImpl">
       		<lookup-method name="getCar" bean="car"/>	
        </bean>
	注:给名为getCar的方法注入bean，此方法的返回值是Car。等于是<property name="car" ref="car"/>是一个意思只是属性注入改成了方法注入

7.方法替换(偷，调用其他bean的方法):
	<bean id="boss1" class="com.smart.injectfun.Boss1">
       		<replaced-method name="getCar" replacer="boss2"/>
        </bean>
        <bean id="boss2" class="com.smart.injectfun.Boss2">
        </bean>
	注:被调用的那一方(boss2)必须实现MethodReplacer接口,此接口的方法即是调用的方法。

8.<bean>之间的继承:
	<bean id="abstractCar" class="com.smart.tagdepend.Car"
       		p:color="黑色" p:brand="兰博基尼" p:price="2000.00" abstract="true"
     	  />

       <bean id="car2" class="com.smart.tagdepend.Car"
      	  parent="abstractCar"
       	/>
	注:父bean不能被实现,即getBean("abstractCar")不可取,abstract="true"声明为父bean,

9.bean之间的依赖:(依赖哪个bean，哪个bean的实例就先创造好)
	<bean id="manager" class="com.smart.tagdepend.CacheManager"
       	depends-on="sysInit"
      	 />
       <bean id="sysInit" class="com.smart.tagdepend.SysInit"/>
	注:manager依赖sysInit,则bean（sysInit）先创建实例

10.整合多个配置文件
	   <import resource="classpath:com/smart/beans1.xml">
	   意义:如果a.xml采用import导入了b.xml,则只需初始化加载a.xml即可。

11.引用其他bean的属性值：
	<bean id="car" class="com.smart.Car"
       		p:color="黑色" p:brand="兰博基尼" p:price="2000.00" abstract="true"
     	  />
	<mvc:resources mapping=#{car.color}..../>








