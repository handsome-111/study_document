mybatisplus:
	1.官方文档:https://mp.baomidou.com/

	2.在spring boot里的配置:
		1.分页插件
			@EnableTransactionManagement
			@Configuration
			@MapperScan("com.youmeng.taotask.mapper*")		//包名为:com.youmeng.taotask.mapper
			public class MybatisPlusConfig {

			    /**
			     * 分页插件
			     */
			    @Bean
			    public PaginationInterceptor paginationInterceptor() {
			        return new PaginationInterceptor();
			    }
			}

		2.配置文件：
			配置数据源：
				spring: 
					datasource: 
					    type: com.zaxxer.hikari.HikariDataSource
					    driver-class-name: com.mysql.cj.jdbc.Driver
					    ##如果使用mybatis plus,最好使用jdbcUrl,并且在配置数据源的时候
					    url:jdbc:mysql://localhost:3308/hdgj?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
					    username: root
					    password: root
					    hikari:
					      minimum-idle: 5
					      idle-timeout: 600000
					      maximum-pool-size: 10
					      auto-commit: true
					      pool-name: MyHikariCP
					      max-lifetime: 1800000
					      connection-timeout: 30000 
					      connection-test-query: SELECT 1

			mybatis-plus: 
  				mapper-locations: classpath:mapper/*Mapper.xml
  				##mapper文件路径存放于resources/mapper 文件夹下
  				configuration:
    				log-impl: org.apache.ibatis.logging.stdout.StdOutImpl   ##显示SQL语句日志


    		事务：
    			1.配置默认的数据源：
		    		// 声明bean
					@Bean
					// 指明读取的配置
					@ConfigurationProperties(prefix = "spring.datasource")
					// 设置为主数据源
					@Primary
					/*
					 * 声明数据源配置
					 */
					public DataSource hdgjDataSource() {
						return DataSourceBuilder.create().build();
					}

				2.配置事务管理器
				@Bean
				public DataSourceTransactionManager transactionManager() {
				  return new DataSourceTransactionManager(dataSource());
				}

				3.使用事务：
					直接在业务类上添加@Transactional即可，但是不能在方法上添加@Transactional,试过会无效



    		Mybatis Plus配置多个数据源
    			@Configuration
				@MapperScan("com.seawaterbt.ssm.mapper*")
				public class MyBatiesPlusConfiguration {

				    /*
				     * 分页插件，自动识别数据库类型
				     * 多租户，请参考官网【插件扩展】
				     */
					/**
				     * 分页插件
				     */
				    @Bean
				    public PaginationInterceptor paginationInterceptor() {
				        return new PaginationInterceptor();
				    }

				    /**
				     * SQL执行效率插件
				     */
				    @Bean
				    @Profile({"dev","qa"})// 设置 dev test 环境开启
				    public PerformanceInterceptor performanceInterceptor() {
				        PerformanceInterceptor performanceInterceptor = new PerformanceInterceptor();
				        performanceInterceptor.setMaxTime(1000);
				        performanceInterceptor.setFormat(true);
				        return performanceInterceptor;
				    }

				    
				    /**
				     * 配置多个数据源
				     * @return
				     */
				    
				    @Bean(name = "db1")
				    @ConfigurationProperties(prefix = "spring.datasource.druid.db1" )
				    public DataSource db1() {
				        return DataSourceBuilder.create().build();
				    }

				    @Bean(name = "db2")
				    @ConfigurationProperties(prefix = "spring.datasource.druid.db2" )
				    public DataSource db2() {
				        return DataSourceBuilder.create().build();
				    }
				    
				    
				    /**
				     * 动态数据源配置
				     * @return
				     */
				    @Bean
				    @Primary
				    public DataSource multipleDataSource(@Qualifier("db1") DataSource db1, @Qualifier("db2") DataSource db2) {
				        MultipleDataSource multipleDataSource = new MultipleDataSource();
				        Map< Object, Object > targetDataSources = new HashMap<>();
				        targetDataSources.put(DataSourceEnum.DB1.getValue(), db1);
				        targetDataSources.put(DataSourceEnum.DB2.getValue(), db2);
				        //添加数据源
				        multipleDataSource.setTargetDataSources(targetDataSources);
				        //设置默认数据源
				        multipleDataSource.setDefaultTargetDataSource(db1);
				        return multipleDataSource;
				    }

				    @Bean("sqlSessionFactory")
				    public SqlSessionFactory sqlSessionFactory() throws Exception {
				        MybatisSqlSessionFactoryBean sqlSessionFactory = new MybatisSqlSessionFactoryBean();
				        sqlSessionFactory.setDataSource(multipleDataSource(db1(),db2()));
				        //sqlSessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:/mapper/*/*Mapper.xml"));

				        MybatisConfiguration configuration = new MybatisConfiguration();
				        //configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);
				        configuration.setJdbcTypeForNull(JdbcType.NULL);
				        configuration.setMapUnderscoreToCamelCase(true);
				        configuration.setCacheEnabled(false);
				        sqlSessionFactory.setConfiguration(configuration);
				        sqlSessionFactory.setPlugins(new Interceptor[]{ //PerformanceInterceptor(),OptimisticLockerInterceptor()
				                paginationInterceptor() //添加分页功能
				        });
				        //sqlSessionFactory.setGlobalConfig(globalConfiguration());
				        return sqlSessionFactory.getObject();
				    }
				 }


			 	public class MultipleDataSource extends AbstractRoutingDataSource {

				    @Override
				    protected Object determineCurrentLookupKey() {
				        return DataSourceContextHolder.getDataSource();
				    }
				}


				public enum DataSourceEnum {

				    DB1("db1"),DB2("db2");

				    private String value;

				    DataSourceEnum(String value){this.value=value;}

				    public String getValue() {
				        return value;
				    }
				}


				public class DataSourceContextHolder {

				    private static final ThreadLocal<String> contextHolder = new InheritableThreadLocal<>();

				    /**
				     *  设置数据源
				     * @param db
				     */
				    public static void setDataSource(String db){
				        contextHolder.set(db);
				    }

				    /**
				     * 取得当前数据源
				     * @return
				     */
				    public static String getDataSource(){
				        return contextHolder.get();
				    }

				    /**
				     * 清除上下文数据
				     */
				    public static void clear(){
				        contextHolder.remove();
				    }
				}


  		3.在pom.xml里扫描文件和依赖：
  			<!-- mybatais plus-->
		    <dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus</artifactId>
				<version>3.0.3</version>
			</dependency> 
		    <dependency>
		        <groupId>com.h2database</groupId>
		        <artifactId>h2</artifactId>
		        <scope>runtime</scope>
		    </dependency>
		    <!-- mybatis plus 启动依赖 -->
			<dependency>
		       	<groupId>com.baomidou</groupId>
		       	<artifactId>mybatis-plus-boot-starter</artifactId>
		       	<version>3.0.1</version>
		  	</dependency>


  			<build>
	  			<!-- 扫描到mybatis的配置文件和yml文件-->
			  	<resources>
			  		<resource>
					  	<directory>src/main/java</directory>
						<includes>
							<include>**/*.xml</include>
						</includes>
					</resource>
					<resource>
					  	<directory>src/main/resources</directory>
						<includes>
							<include>**/**</include>
						</includes>
					</resource>
			  	</resources> 
			</build>

		4.其他事项：
			1.Mapper接口需要用@Mapper注解来定义
			2.mapper.xml文件的namespace对应的是Mapper类
			3.数据源一定要配置好



	3.使用,CURD接口：
		具体可以看例子：https://gitee.com/joker-pper/mybatis-plus-cascade
		
		使用接口的时,级联操作需要添加以下属性,不然会报错：
			如：
			@TableField(value = "userid", el = "user.id")		//value:表示数据库表address里User的字段名称,el：表示引用的属性/字段
    		private User user;


		1.Mapper的CURD接口：
			1.文档：https://mp.baomidou.com/guide/crud-interface.html#mapper-crud-%E6%8E%A5%E5%8F%A3

			2.Wrapper条件构造器：
				官方文档：https://mp.baomidou.com/guide/wrapper.html#abstractwrapper
				AbstractWrapper抽象类，
				AbstractWrapper实现类：
					QueryWrapper(LambdaQueryWrapper)
					UpdateWrapper(LambdaUpdateWrapper) 
					用于生成 sql 的 where 条件, entity 属性也用于生成 sql 的 where 条件

					如：
						QueryWrapper query = new QueryWrapper();
						query.eq("username", "aaa");
						Customer customer = customerMapper.selectOne(query);

		2.Service的CURD接口:
			1.文档：https://mp.baomidou.com/guide/crud-interface.html#service-crud-%E6%8E%A5%E5%8F%A3
			2.Service条件构造器,和Mapper的条件构造器一样，统一的文档


		3.mapper层的配置：
			https://mp.baomidou.com/guide/crud-interface.html#mapper-%E5%B1%82-%E9%80%89%E8%A3%85%E4%BB%B6




Spring mybatis：
	1.官方文档：http://www.mybatis.org/spring/getting-started.html
	2.spring boot myabtis文档：http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/

	2.配置事务管理器：
		@Bean
		public DataSourceTransactionManager transactionManager() {
		  return new DataSourceTransactionManager(dataSource());
		}


	3.Mapper注解配置：
		例子1:
			@Select("select id, name, state, country from city where state = #{state}")
  			City findByState(@Param("state") String state);



mybatis文档：https://mybatis.org/mybatis-3/zh/index.html

SELECT标签：
	1.例子：
		<select id="selectPerson" parameterType="int" resultType="hashmap">
		  SELECT * FROM PERSON WHERE ID = #{id}
		</select>

	参数：

		id				在命名空间中唯一的标识符，可以被用来引用这条语句。

		parameterType	将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler） 推断出具体传入语句的参数，默认值为未设置（unset）。

		parameterMap	这是引用外部 parameterMap 的已经被废弃的方法。请使用内联参数映射和 parameterType 属性。

		resultType		从这条语句中返回的期望类型的类的完全限定名或别名。 注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。可以使用 resultType 或 resultMap，但不能同时使用。

		resultMap		外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂映射的情形都能迎刃而解。可以使用 resultMap 或 resultType，但不能同时使用。

		flushCache		将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。

		useCache		将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。

		timeout			这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖驱动）。

		fetchSize		这是一个给驱动的提示，尝试让驱动程序每次批量返回的结果行数和这个设置值相等。 默认值为未设置（unset）（依赖驱动）。

		statementType	STATEMENT，PREPARED 或 CALLABLE 中的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
		resultSetType	FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖驱动）。

		databaseId		如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。
		
		resultOrdered	这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。 这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。
		
		resultSets		这个设置仅对多结果集的情况适用。它将列出语句执行后返回的结果集并给每个结果集一个名称，名称是逗号分隔的。


一对多,一对一等例子：
	https://www.cnblogs.com/jimisun/p/9414148.html


结果映射：
	1.级联查询（使用连接的方式）：
		1.使用association标签
		2.然后添加额外的resultMap,即级联的结果集

		例子：

		1.查询
		<select id="selectUserByopenid" parameterType="java.lang.String" resultType="userResultMap">
			SELECT 
				u.id,u.nickname,u.password,			
				addr.id			as 	addr_id,
				addr.email		as 	addr_email,
				addr.name		as 	addr_name,
				addr.company	as 	addr_company,
			FROM user u LEFT JOIN address addr on addr.userid = u.id WHERE openid = #{openid}
		</select>

		2.<!-- 全部的结果集 -->
		<resultMap id="userResultMap" type="com.hdgj.User">
		  <id property="id" column="id" />
		  <result property="username" column="username"/>
		  <result property="password" column="password"/>
		  <association property="defaultAddress" column="id" javaType="com.hdgj.entity.Address"/>
		</resultMap>

		3.<!-- Address返回结果 -->
	    <resultMap id="addressResult" type="com.hdgj.entity.Address">
	    	<id column="id" property="id" />
	        <result column="addr_email" property="email" />
	        <result column="addr_name" property="name" />
	        <result column="addr_company" property="company" />
	    </resultMap>
			       
		 


	2.级联查询（不使用连接的方式，多次查询）：
		1.第一次查询
		<select id ="selectByOpenid" parameterType="java.lang.String" resultMap="userAndDefaultAddress">
			SELECT * FROM user WHERE openid = #{openid}
		</select>

		2.第二次查询的值，直接放入级联里
		<select id="selectDefaultAddress" resultType="com.hdgj.entity.Address">
			SELECT * FROM address WHERE userid = #{id} And is_default = 1
		</select>

		3.结果集合里包括的是级联要二次查询的值
	    <resultMap id="userAndDefaultAddress" type="com.hdgj.entity.User">
	        <id column="id" property="id" />
	        <result column="nickname" property="nickname" />
	        <result column="password" property="password" />
	        <association property="defaultAddress" column="id" javaType="com.hdgj.entity.Address" select="selectDefaultAddress" />
	    </resultMap>



	3.级联插入和更新:直接传入外键参数即可
		1.当使用的是mybatis plus 的接口的时候,为了自动插入,需要在字段上添加：
			@TableField(value = "userid", el = "user.id")
    		private User user;

		


	2.返回指定的字段：
		1.添加额外的resultMap
			<resultMap id="userResultMap" type="com.hdgj.User">
			  <id property="id" column="user_id" />
			  <result property="username" column="user_name"/>
			  <result property="password" column="hashed_password"/>
			</resultMap>

		2.使用：
			<select id="selectUsers" resultMap="userResultMap">
			  select user_id, user_name, hashed_password
			  from some_table
			  where id = #{id}
			</select>


