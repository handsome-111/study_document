URL:
	详情文档：http://nodejs.cn/api/url.html#url_url_strings_and_url_objects

	url 模块提供了两套 API 来处理 URL：一个是旧版本遗留的 API，一个是实现了 WHATWG标准的新 API。

		WHATWG标准的新API:
			const myURL =
			  new URL('https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash');
		使用遗留的 API 解析 URL 字符串：
			const url = require('url');
			const myURL =
			  url.parse('https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash');

	常用API：
		URL类：
			url.hash	获取及设置URL的分段(hash)部分。
			url.host	获取及设置URL的主机(host)部分。包括端口
			url.hostname	获取及设置URL的主机名(hostname)部分
			url.href	获取及设置序列化的URL。（即，获取整条URL）
			url.origin	获取只读序列化的URL origin部分。（即协议+地址）
			url.password 	获取及设置URL的密码(password)部分。
			url.pathname	获取及设置URL的路径(path)部分。
			url.port		获取及设置URL的端口(port)部分。
			url.protocol	获取及设置URL的协议(protocol)部分。
			url.search		获取及设置URL的序列化查询(query)部分部分。即参数
			url.searchParams	获取表示URL查询参数的URLSearchParams对象（用get来获取值，如：myURL.searchParams.get('query')）
			url.username	获取及设置URL的用户名(username)部分。
			url.toString()	在URL对象上调用toString()方法将返回序列化的URL。返回值与url.href和url.toJSON()的相同。
			url.toJSON()	在URL对象上调用toJSON()方法将返回序列化的URL。

		URLSearchParams类：
			详见文档：http://nodejs.cn/api/url.html#url_constructor_new_urlsearchparams

			new URLSearchParams（string）	
				将string解析成一个查询字符串, 并且使用它来实例化一个新的URLSearchParams对象.  如果string以'?'打头,则'?'将会被忽略.
			new URLSearchParams（obj）	
				<Object> 一个表示键值对集合的对象

			urlSearchParams.append（name，value）		在查询字符串中附加一个新的键值对。
			urlSearchParams.forEach（fn [，thisArg]）	在查询字符串中迭代每个键值对，并调用给定的函数。
			urlSearchParams.get（name）			返回键是name的第一个键值对的值。如果没有对应的键值对，则返回null。
			urlSearchParams.getAll（name）		返回键是name的所有键值对的值，如果没有满足条件的键值对，则返回一个空的数组。
			urlSearchParams.has（name）			如果存在至少一对键是name的键值对则返回 true。
			urlSearchParams.keys（）				在每一个键值对上返回一个键的ES6迭代器。
			urlSearchParams.set（name，value）				将URLSearchParams对象中与name相对应的值设置为value。如果已经存在键为name的键值对，将第一对的值设为value并且删除其他对。
			urlSearchParams.sort（）				按现有名称就地排列所有的名称-值对。
			urlSearchParams.toString（）			返回查询参数序列化后的字符串，必要时存在百分号编码字符。







