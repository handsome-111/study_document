Spring MVC:
	
1.开启热部署：
	添加一下依赖即可：
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!-- optional=true, 依赖不会传递, 该项目依赖devtools;
                之后依赖boot项目的项目如果想要使用devtools, 需要重新引入 -->
            <optional>true</optional>
        </dependency>

2.配置文件的存储和读取：
	1.默认将读取application.yml文件
	2.读取配置文件：	
		@Value("${weidian.appkey}")
		private String appkey;

3.配置Bean(即单例的类):
	@Configuration
	public class ServerConfiguration {
		
		@Bean
		public AbstractWeidianClient getWeidianClient(){
			return new VdianItemGetRequest(token, appkey);
		}
	}

3.x. 在构造函数里获取配置文件@Value
	1.将@Value注解放在构造函数里即可

	@Component
	public class MongoParsehandler{
		
		private String mongopath;

		private Map<String,String> xmlPath = new HashMap<String,String>();
		
		public MongoParsehandler(@Value("${mongopath}")String mongopath){
			this.mongopath = mongopath;
			System.out.println("mongopath:" + mongopath);
		}
	}

4.调用外部http接口：
	1.在配置类里配置好bean
		@Bean	
	    public RestTemplate restTemplate() {
			return new RestTemplate();
	    }

	2.使用
		官网：https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/integration.html#rest-client-access
		@Autowired 
    	private RestTemplate restTemplate;

    	1.发起post请求：
    		 String response = restTemplate.postForObject("http://localhost:81/taotask/startGoodsListingTask", paramMap, String.class);

       	2.发起get请求:
        	restTemplate.getForObject("https://oauth.open.weidian.com/token?grant_type=client_credential&appkey=xxx&secret=xxx", String.class);

    3.最后一个参数为responseType,即响应类型,统一为String,json串。

    4.发送请求下载文件：	
    	File file = restTemplate.execute(jsonUser.getString("avatarUrl"), HttpMethod.GET, null, clientHttpResponse -> {	
				
			    File ret = new File(filePath);
			    //文件流复复制
			    StreamUtils.copy(clientHttpResponse.getBody(), new FileOutputStream(ret));	
			    return ret;	
			});	


4.spring 事务：
	1.因为在spring boot中是自动加入@EnableTransactionManagement注解的,所以无需在应用上添加这个注解
	2.使用：直接在方法上使用@Transactional 即可,如果存在多个数据库，数据源，则需要配置
		




5.URIBuilder,URI拼装和解析工具
		依赖：
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>4.5</version>
				<optional>true</optional>
			</dependency>


		URIBuilder uri = new URIBuilder(); 
		uri.addParameter("grant_type", "client_credential");
		uri.addParameter("appkey",appkey);
		uri.addParameter("secret",secret);
		
		如：https://oauth.open.weidian.com/token
		uri.setHost("oauth.open.weidian.com");	//设置主机
		uri.setPath("/token");					//设置path
		uri.setScheme("https");					//设置协议
		String url = uri.toString();


6.Spring MVC:
	SpringMVC官方文档：https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/web.html#mvc

	Tomcat执行顺序：
		Filter -> Servlet -> Interceptor -> controller
	
	1.处理方法(method)：

	请求参数：https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/web.html#mvc-ann-arguments
		例子：
		@RequestMapping(value = "/aa/{user}")
		public User getUser(@PathVariable Long user,@RequestParam("userName") String userName, @RequestHeader("Accept-Encoding") String encoding ,@RequestBody requestBody，@CookieValue("JSESSIONID") String cookie,@SessionAttribute User user, @RequestParam("file") MultipartFile file，@ResponseBody Goods goods){
			 ...
		}



		1.@RequestParam:Servlet请求参数（即查询参数或表单数据）绑定到控制器中的方法参数。
		2.@RequestHeader:将请求标头绑定到控制器中的方法参数。
		3.@PathVariable:路径变量
		4.@CookieValue：将HTTP cookie的值绑定到控制器中的方法参数。
		5.@SessionAttribute:访问全局管理的预先存在的会话属性
		6.@RequestAttribute:访问先前创建的预先存在的请求属性（例如，通过Servlet Filter 或HandlerInterceptor）
		7.@RequestBody:将接收的参数转换为对象,属性一定要相同,最好使用JSON来接受所有参数，如
			1.post请求
			@PostMapping("/updateAddress")
			public ResponseData updateAddress(@RequestBody JSONObject jsonObject){
				Address address = jsonObject.getJSONObject("requestParam").getJSONObject("address").toJavaObject(Address.class);
				System.out.println(address);
				System.out.println(addressService.updateAddress(address));
				return ResponseDataUtil.buildSuccess(address);
			}

			2.get请求,前端传递JSON字符串过来即可
			@GetMapping("/addCart")
		public String addCart(@RequestParam("cart") String jsonStr){...}

		7.重定向属性：
			return "redirect:files/{path}";
		8.Multipart:
			POST的内容与要求multipart/form-data进行解析
			将参数类型声明为List<MultipartFile>允许解析相同参数名称的多个文件。
		9.@ResponseBody:
			将请求传递来的参数赋值到对象里，等于是自动赋值,对象里不存在的属性就不赋值
			也可以用List<Map<String,Object>>来对照赋值
			例子：
				@ResponseBody Goods goods
				@ResponseBody List<Map<String,Object>> Goods
		10.@ResponseBody:返回字符串
		11.ResponseEntity<T>:将对象自动返回JSON串格式到客户端
			如：
				public ResponseEntity<WxEntity> test1(){
					WxEntity w = new WxEntity();
					w.setId("asdasd");
					w.setName("哈哈");
					return new ResponseEntity<WxEntity>(w,HttpStatus.OK);
				}


	2.控制器建议（Controller）:
		1.@Controller:标识为一个控制器
		2.@RequestMapping:请求映射路径
		3.@RestController: 等于 @ResponseBody + @Controller

	3.拦截器：
		文档：https://docs.spring.io/spring/docs/5.1.8.RELEASE/spring-framework-reference/web.html#mvc-config-interceptors
		1.说明：对方法或请求进行拦截，方法调用前，方法调用后

		使用：
			@Configuration
			@EnableWebMvc
			public class WebConfig implements WebMvcConfigurer {

			    @Override
			    public void addInterceptors(InterceptorRegistry registry) {
			        registry.addInterceptor(new LocaleChangeInterceptor());
			        registry.addInterceptor(new ThemeChangeInterceptor()).addPathPatterns("/**").excludePathPatterns("/admin/**");
			        registry.addInterceptor(new SecurityInterceptor()).addPathPatterns("/secure/*");
			    }
			}

	4.过滤器：

	5.模板引擎(thymeleaf)：
		1.直接引入pom.xml
			<!--thymeleaf模板引擎，无需再引入web模块-->
			<dependency>
			    <groupId>org.springframework.boot</groupId>
			    <artifactId>spring-boot-starter-thymeleaf</artifactId>
			</dependency>

		2.直接控制器使用即可，返回ModelAndView,后缀默认是.html

		3.在resources下创建文件夹templates，放模板引擎页面，也可以放静态页面

	6.获取项目的classes路径:
		String path = ResourceUtils.getURL("classpath:").getPath();	//直接使用即可


7.静态资源：
	1.默认情况下，Spring Boot从类路径中的/static（ /public或/resources或/META-INF/resources）目录或者根目录中提供静态内容ServletContext

	2.可以使用该spring.mvc.static-path-pattern属性对其进行调整

	3.application.yml:
		spring.mvc.static-path-pattern = / resources / **

8.模板引擎：
	Thymeleaf：
	当使用模板引擎和默认配置时，模板将自动从中获取src/main/resources/templates。


9.spring security:
	1.配置
		1.关闭默认配置：security.basic.enable=false
		2.配置用户名和密码,
			spring
				security:
				    user:
				      # 账号
				      name: root
				      # 密码
				      password: 123456

    2.CSRF防护:spring security会默认开启csrf防护，会拦截所有post请求

	3.认证：
		1.继承WebSecurityConfigurerAdapter：
			1.configure(HttpSecurity http)
			2.configure(WebSecurity web)
			3.configure(AuthenticationManagerBuilder auth)

		2.原理，spring security在处理请求的时候，都会经过spring security的内部过滤器链。
			如：
				请求 -> UsernamePasswordAuthenticationFilter -> BasicAuthenticationFilter -> 其他过滤器（非必需的，和前面的过滤器都是非必需的）
				-> ExceptionTrasnactionFilter(捕获异常，比如登录失败) -> FilterSecurityInterceptor（必须的，内置的过滤器） -> API(控制器)
			

		1.基于表单的认证：
			1.实现接口UserDetailsService
			2.实现接口UserDetails
			3.自定义登录(认证)成功处理：
				1.实现接口AuthenticationSuccessHandler
				2.然后将该实现类配置在http.formLogin().successHandler(实现类)中

	目的：解决了认证授权和资源保护的方案，不需要用提供用户名和密码


Spring OAuth2：
	1.介绍：
		1.客户端的授权模式：
			implicit：简化模式，不推荐使用

			authorization code：授权码模式
				授权码模式适用于有自己的服务器的应用，它是一个一次性的临时凭证，用来换取 access_token 和 refresh_token
				1.客户端请求认证服务器获取授权码(请求：http://localhost:8080/oauth/authorize?client_id=client&response_type=code),spring cloud默认配置接口是oauth/authorize

				2.在认证服务器下认证通过之后(即Security的WebSecurityConfigurerAdapter的configure(AuthenticationManagerBuilder auth)方法),返回授权码到回调地址里。

				3.通过授权码发送POST请求获取access_token:
					1.需要传入 code、client_id 以及 client_secret参数。
					2.验证通过后，返回 access_token 和 refresh_token
					3.授权码只能使用一次，如以下请求再次发送会报错
					如curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=authorization_code&code=dRQI0r" "http://client:secret@localhost:8080/oauth/token"


			resource owner password credentials：密码模式

			client credentials：客户端模式
			
	
	2.例子：
		客户端信息和用户信息都存储在内存中。
		使用的是授权码模式（即获取到授权码之后才能去能获取令牌,获取了令牌才能访问资源）,

		1.配置认证服务器(使用内存的方式配置):
			@Configuration
			@EnableAuthorizationServer
			public class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter {
				
				@Autowired
				private BCryptPasswordEncoder passwordEncoder;
				
				/**
				 * 授权,即获取授权码等
				 * 配置客户端,配置哪些客户端可以访问我这个认证服务器,把客户端信息保存到内存中演示
				 */
			    @Override
			    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
			        // 配置客户端
			        clients
			                // 使用内存设置
			                .inMemory()
			                // client_id
			                .withClient("client")
			                // client_secret
			                .secret(passwordEncoder.encode("secret"))
			                /**
			                 * 授权类型,有4种
			                 * 1.implicit：简化模式
			                 * 2.authorization_code：授权码模式
			                 * 3.resource_owner_password_credentials：密码模式
			                 * 4.client_credentials：客户端模式
			                 */
			                .authorizedGrantTypes("authorization_code")
			                // 授权范围,即能够获取的权限
			                .scopes("app")
			                // 注册回调地址,获取授权码之后回调的地址,当回调到这个地址之后就会获取了授权码，即授权码模式
			                .redirectUris("http://www.funtl.com");
			    }
			}


		2.服务器安全配置，搭配Spring Security来使用：
			@Configuration
			@EnableWebSecurity
			@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)
			/**
			 * 认证
			 * @author Administrator
			 *
			 */
			public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
				
				@Bean
				public BCryptPasswordEncoder passwordEncoder(){
					/*
					 * 可以自定义加密方式
					 * 具体可参考:PasswordEncoderFactories.createDelegatingPasswordEncoder()
					  	encoders.put("ldap", new org.springframework.security.crypto.password.LdapShaPasswordEncoder());
						encoders.put("MD4", new org.springframework.security.crypto.password.Md4PasswordEncoder());
						encoders.put("MD5", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder("MD5"));
						encoders.put("noop", org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance());
						encoders.put("pbkdf2", new Pbkdf2PasswordEncoder());
						encoders.put("scrypt", new SCryptPasswordEncoder());
						encoders.put("SHA-1", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder("SHA-1"));
						encoders.put("SHA-256", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder("SHA-256"));
						encoders.put("sha256", new org.springframework.security.crypto.password.StandardPasswordEncoder());
					*/
					return new BCryptPasswordEncoder();
				}
				
				/**
				 * 将认证信息存储在内存中,简单的DEMO方便展示
				 */
				@Override
				protected void configure(AuthenticationManagerBuilder auth) throws Exception {
					// TODO Auto-generated method stub
					auth.inMemoryAuthentication()
						.withUser("user").password(passwordEncoder().encode("123456")).roles("USER")
						.and()
						.withUser("admin").password(passwordEncoder().encode("123456")).roles("ADMIN");
				}
			}


	3.例子：
		1.将客户端信息和用户信息存放在JDBC中
		2.配置认证服务器：基于JDBC的方式存储,即JDBC,将客户端信息存储到数据库中
			@Configuration
			@EnableAuthorizationServer
			public class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter {
				
				@Autowired
				private DataSource dataSource;
				
				/**
				 * 基于 JDBC 实现，需要事先在数据库配置客户端信息
				 * @return
				 */
				@Bean
				public ClientDetailsService jdbcClientDetails(){
					return new JdbcClientDetailsService(dataSource);
				}
				
				/**
				 * 基于 JDBC 实现，令牌保存到数据
				 * @return
				 */
				@Bean
			    public TokenStore tokenStore() {
			        return new JdbcTokenStore(dataSource);
			    }

				
				
				/**
				 * 授权,即获取授权码等
				 * 配置客户端,配置哪些客户端可以访问我这个认证服务器,把客户端信息保存到内存中演示
				 */
			    @Override
			    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
			    	// 读取客户端配置
			    	clients.withClientDetails(jdbcClientDetails());
			    }
			    
			    /**
			     * 设置令牌
			     */
			    @Override
			    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
			    	endpoints.tokenStore(tokenStore());
			    }
			}

		3.服务器安全配置，搭配Spring security认证来使用：
			@Configuration
			@EnableWebSecurity
			@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)
			/**
			 * 认证
			 * @author Administrator
			 *
			 */
			public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
				
				@Bean
				public BCryptPasswordEncoder passwordEncoder(){
					/*
					 * 可以自定义加密方式
					 * 具体可参考:PasswordEncoderFactories.createDelegatingPasswordEncoder()
					  	encoders.put("ldap", new org.springframework.security.crypto.password.LdapShaPasswordEncoder());
						encoders.put("MD4", new org.springframework.security.crypto.password.Md4PasswordEncoder());
						encoders.put("MD5", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder("MD5"));
						encoders.put("noop", org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance());
						encoders.put("pbkdf2", new Pbkdf2PasswordEncoder());
						encoders.put("scrypt", new SCryptPasswordEncoder());
						encoders.put("SHA-1", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder("SHA-1"));
						encoders.put("SHA-256", new org.springframework.security.crypto.password.MessageDigestPasswordEncoder("SHA-256"));
						encoders.put("sha256", new org.springframework.security.crypto.password.StandardPasswordEncoder());
					*/
					return new BCryptPasswordEncoder();
				}
				
				
				
				@Override
				protected void configure(AuthenticationManagerBuilder auth) throws Exception {
					// TODO Auto-generated method stub
					auth.inMemoryAuthentication()
						.withUser("user").password(passwordEncoder().encode("123456")).roles("USER")
						.and()
						.withUser("admin").password(passwordEncoder().encode("123456")).roles("ADMIN");
				}
			}

		4.数据库表：
			CREATE TABLE `clientdetails` (
			  `appId` varchar(128) NOT NULL,
			  `resourceIds` varchar(256) DEFAULT NULL,
			  `appSecret` varchar(256) DEFAULT NULL,
			  `scope` varchar(256) DEFAULT NULL,
			  `grantTypes` varchar(256) DEFAULT NULL,
			  `redirectUrl` varchar(256) DEFAULT NULL,
			  `authorities` varchar(256) DEFAULT NULL,
			  `access_token_validity` int(11) DEFAULT NULL,
			  `refresh_token_validity` int(11) DEFAULT NULL,
			  `additionalInformation` varchar(4096) DEFAULT NULL,
			  `autoApproveScopes` varchar(256) DEFAULT NULL,
			  PRIMARY KEY (`appId`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;

			CREATE TABLE `oauth_access_token` (
			  `token_id` varchar(256) DEFAULT NULL,
			  `token` blob,
			  `authentication_id` varchar(128) NOT NULL,
			  `user_name` varchar(256) DEFAULT NULL,
			  `client_id` varchar(256) DEFAULT NULL,
			  `authentication` blob,
			  `refresh_token` varchar(256) DEFAULT NULL,
			  PRIMARY KEY (`authentication_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;

			CREATE TABLE `oauth_approvals` (
			  `userId` varchar(256) DEFAULT NULL,
			  `clientId` varchar(256) DEFAULT NULL,
			  `scope` varchar(256) DEFAULT NULL,
			  `status` varchar(10) DEFAULT NULL,
			  `expiresAt` timestamp NULL DEFAULT NULL,
			  `lastModifiedAt` timestamp NULL DEFAULT NULL
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;

			CREATE TABLE `oauth_client_details` (
			  `client_id` varchar(128) NOT NULL,
			  `resource_ids` varchar(256) DEFAULT NULL,
			  `client_secret` varchar(256) DEFAULT NULL,
			  `scope` varchar(256) DEFAULT NULL,
			  `authorized_grant_types` varchar(256) DEFAULT NULL,
			  `web_server_redirect_uri` varchar(256) DEFAULT NULL,
			  `authorities` varchar(256) DEFAULT NULL,
			  `access_token_validity` int(11) DEFAULT NULL,
			  `refresh_token_validity` int(11) DEFAULT NULL,
			  `additional_information` varchar(4096) DEFAULT NULL,
			  `autoapprove` varchar(256) DEFAULT NULL,
			  PRIMARY KEY (`client_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;

			CREATE TABLE `oauth_client_token` (
			  `token_id` varchar(256) DEFAULT NULL,
			  `token` blob,
			  `authentication_id` varchar(128) NOT NULL,
			  `user_name` varchar(256) DEFAULT NULL,
			  `client_id` varchar(256) DEFAULT NULL,
			  PRIMARY KEY (`authentication_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;

			CREATE TABLE `oauth_code` (
			  `code` varchar(256) DEFAULT NULL,
			  `authentication` blob
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;

			CREATE TABLE `oauth_refresh_token` (
			  `token_id` varchar(256) DEFAULT NULL,
			  `token` blob,
			  `authentication` blob
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;



	4.RBAC：基于角色的权限控制模型,角色可以是人，系统和时间等。
		概念:
			Who：权限的拥用者或主体（如Principal、User、Group、Role、Actor等等）。

			What：权限针对的对象或资源（Resource、Class）。

			How：具体的权限（Privilege,正向授权与负向授权）。

			Operator：操作。表明对What的How操作。也就是Privilege+Resource

			Role：角色，一定数量的权限的集合。权限分配的单位与载体,目的是隔离User与Privilege的逻辑关系.

			Group：用户组，权限分配的单位与载体。权限不考虑分配给特定的用户而给组。组可以包括组(以实现权限的继承)，也可以包含用户，组内用户继承组的权限。User与Group是多对多的关系。Group可以层次化，以满足不同层级权限控制的要求。
			
			RBAC的关注点在于Role和User, Permission（允许/权限）的关系。

	1.oAuth标准:
		oAuth是一种协议，主要是提供认证和授权的标准。与以往的授权方式不同之处是oAuth的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此 oAuth 是安全的。
	
	2.Spring Security框架:实现了oAuth标准

	3.注意：客户端不能直接访问资源服务器，需要先访问认证服务器

	4.访问自己的资源：	
		如资源: http://localhost/users/getUserinfo
		带上令牌(token)才能查询：http://localhost/users/getUserinfo?access_token=123456
		2.refresh_token(刷新令牌,为了防止用户获取了token无限制的访问资源)
			1.Refresh Token 一定是保存在客户端的服务器上 ，而绝不能存放在狭义的客户端（例如 App、PC 端软件）上。调用 refresh 接口的时候，一定是从服务器到服务器的访问。

			2.oAuth2.0 引入了 appid 机制。即每一个 appid 都对应一个 appSecret appSecret 会在客户端申请 appid 时，随 appid 一起分配给客户端。客户端必须把 appSecret 妥善保管在服务器上，决不能泄露。刷新 Access Token 时，需要验证这个 appSecret

			刷新token接口会类似于：
				http://localhost/refresh?refresh_toekn=111&appid=222&appSecret=333

	5.客户端授权模式:
		文档：https://www.funtl.com/zh/spring-security-oauth2/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F.html#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91
		1.implict:简化模式，不推荐使用
		2.authorization code:授权码模式，即使用令牌
			1.授权码模式适用于有自己的服务器的应用，它是一个一次性的临时凭证，用来换取 access_token 和 refresh_token。
			2.例子:自己的应用对接微信小程序
				1.认证：获取微信用户唯一标识 OpenID 和 会话密钥 session_key。
					1.通过微信小程序给予的appid和secret在服务器端（一定要在服务器端，在客户端发送请求不安全）向微信接口发送请求
						如：https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET
						请求响应返回会用的OpenId和session_key

				2.授权（获取令牌）：访问微信接口服务
					1.获取小程序全局唯一后台接口调用凭据（access_token,就是访问令牌，需要在服务器端调用接口读取令牌，而不是客户端）
						如：https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET
						则返回：access_toekn,即令牌

					2.访问接口服务,拿取到的令牌调用微信接口服务
						如：https://api.weixin.qq.com/datacube/getweanalysisappidmonthlyretaininfo?access_token=ACCESS_TOKEN

		3.resource owner password credentials：密码模式,用户向客户端提供自己的用户名和密码。
			流程：
				1.用户用账号密码向认证服务器换取token
				2.用户使用token向资源服务器访问资源
			场景：同一个企业内部的不同产品要使用本企业的 oAuth2.0 体系，因为都是自己企业的用户，不需要给第三方，如QQ和QQ空间


	6.代码实现：
		1.认证,需要继承WebSecurityConfigurerAdapter类
		2.授权,需要继承AuthorizationServerConfigurerAdapter

	7.基于权限
	8.令牌的管理方式：
		1.使用数据库来存储令牌
		2.数据库表：	https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql

10.微服务架构：
	1.目的解耦
	2.分布式,多个服务（即服务器,多个后台）
		1.客户端（第三方等）如何访问
		2.
		3.服务之间的通信:对内RPC,对外Rest
	3.

11.配置多个数据源：
	详见官网：https://docs.spring.io/spring-boot/docs/2.1.8.RELEASE/reference/html/howto-data-access.html#howto-configure-a-datasource

	1.数据源：
		数据源建立多个数据库连接，这些数据库连接会保存在数据库连接池中，当需要访问数据库时，只需要从数据库连接池中获取空闲的数据库连接，当程序访问数据库结束时，数据库连接会放回数据库连接池中。

	2.传统的JDBC访问数据库技术，每次访问数据库都需要通过数据库驱动器Driver和数据库名称以及密码等等资源建立数据库连接。
		这样的连接存在两大问题：
			1. 频繁的建立数据库连接与断开数据库，这样会消耗大量的资源和时间，降低性能。
			2. 数据库的连接需要用户名和密码等等，这些需要一定的内存和CPU一定开销。



	单个数据源也可以用以下方式

	1.配置类：
		// 声明bean
		@Bean(name = "hdgjDataSource")
		// 指明读取的配置
		@ConfigurationProperties(prefix = "spring.datasource.hdgj")
		// 设置为主数据源
		@Primary
		/*
		 * 声明数据源配置
		 */
		public DataSource hdgjDataSource() {
			return DataSourceBuilder.create().build();
		}


		配置事务管理器：
		@Bean//如果有多个事务管理器，则需要配置名称，使用@Transaction的时候也需要加上名称(name="XXXtransactionManager")
		public DataSourceTransactionManager transactionManager() {
		  return new DataSourceTransactionManager(dataSource());
		}

		下面的也可以不使用：

		@Bean(name = "hdgjSqlSessionFactory")
		@Primary
		/**
		 * 使用声明的数据源，创建sqlSession工厂
		 */
		public SqlSessionFactory testSqlSessionFactory(@Qualifier("hdgjDataSource") DataSource dataSource)
				throws Exception {
			SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
			/*
			 * 当mybatis采用映射配置文件的方式时，指明该数据源需要是扫描的xml文件路径
			 */
			bean.setDataSource(dataSource);
			/*
			 * bean.setMapperLocations( new
			 * PathMatchingResourcePatternResolver().getResources(
			 * "classpath:mybatis/mapper/test1/*.xml"));
			 */
			return bean.getObject();
		}

	2.application.yml:
		spring.datasource.hdgj.username......
		spring.datasource.test2.username.....	

	3.使用事务：
		直接在业务类上添加@Transactional即可，但是不能在方法上添加@Transactional,试过会无效

12.整合mybatus plus

13.Spring schedule(调度器):
	官方文档：https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/integration.html#scheduling

	abstract TaskExecutor:任务执行器，是线程池的概念，一个执行器可能是单线程的也可能是同步的

	使用例子:
		1.在Application上使用注解@EnableScheduling，启动计划注释，如：
			@EnableScheduling
			@SpringBootApplication
			public class HdgjApiApplication{。。。。}

		2.在@Component上注解的类里添加计划方法即可，如：
			/**
			 * 同步微店商品
			 * @throws OpenException 
			 */
			@Scheduled(initialDelayString = "${jobs.initialDelay}",fixedRateString="${jobs.fixedRate}")
			public void synVdProducts() throws OpenException,Exception{。。。}

			参数详解:
				1. initialDelayString:表示任务延迟在多少毫秒之后执行
				2. fixedRateString：每隔多少毫秒执行一次


14.spring actuator(执行器监控)
	官方文档：https://docs.spring.io/spring-boot/docs/2.1.7.RELEASE/reference/html/production-ready-endpoints.html

	1.依赖：
		<dependency>  
		    <groupId>org.springframework.boot</groupId>  
		    <artifactId>spring-boot-starter-actuator</artifactId>  
		</dependency>  

	2.路径解析

	HTTP方法		路径				描述								web (鉴权,需要授权）
	GET			/autoconfig		查看自动配置的使用情况			true
	GET			/configprops	查看配置属性，包括默认配置			true
	GET			/beans			查看bean及其关系列表				true
	GET			/dump			打印线程栈						true
	GET			/env			查看所有环境变量					true
	GET			/env/{name}			查看具体变量值				true
	GET			/health			查看应用健康指标					false
	GET			/info	查看应用信息（需要自己在application.properties里头添加信息，比如info.contact.email=easonjim@163.com）	false
	GET			/mappings		查看所有url映射					true
	GET			/metrics		查看应用基本指标					true
	GET			/metrics/{name}	查看具体指标						true
	POST		/shutdown		关闭应用（要真正生效，得配置文件开启endpoints.shutdown.enabled: true）	true
	GET			/trace			查看基本追踪信息					true


	3.更改端点暴露，如上只有health和info是不需要鉴权，更改配置文件
		属性															默认
		management.endpoints.jmx.exposure.exclude
 
		management.endpoints.jmx.exposure.include					*

		management.endpoints.web.exposure.exclude
		 
		management.endpoints.web.exposure.include					info, health


	4.保护HTTP端点，可以通过spring security来设置，如：
		@Configuration
		public class ActuatorSecurity extends WebSecurityConfigurerAdapter {

			@Override
			protected void configure(HttpSecurity http) throws Exception {
				http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests()
						.anyRequest().hasRole("ENDPOINT_ADMIN")
						.and()
					.httpBasic();
			}

		}

15.pom.xml：
	1.在引入外部的jar:
		如：
			<dependency>
			    <groupId>com.0opslab</groupId>
			    <artifactId>opslabJutil</artifactId>
			    <version>2.0.2</version>
			    <scope>system</scope>
			    <systemPath>${project.basedir}/libs/opslabJutil-2.0.2.jar</systemPath>
			</dependency>

		jar路径：同src目录下，创建一个libs文件夹。放进去即可

16.spring Redis:
		1.依赖：
			<dependency>
	            <groupId>org.springframework.boot</groupId>
	            <artifactId>spring-boot-starter-data-redis</artifactId>
	        </dependency>

	    2.spring data redis 文档：https://docs.spring.io/spring-data/redis/docs/2.1.10.RELEASE/reference/html/


	    3.使用:
	    	1.RedisTemplate和StringRedisTemplate:前者可以存储对象,后者仅仅存储字符串
	    	2.如果使用了spring boot,直接注入即可。
	    	3.两者的使用方法都是一样的

	    	@Autowired
			private StringRedisTemplate redis;
			
			@Autowired
			private RedisTemplate redisTemplate;

	    3.事务：
	   		1.程序化开启事务。（建议使用）
	    	List<Object> list = redis.execute(new SessionCallback<List<Object>>(){

				@Override
				public List<Object> execute(RedisOperations operations) throws DataAccessException {
					/**
					 * Redis的提供支持的事务通过multi，exec和discard命令
					 */
					
					operations.multi();
					
					operations.opsForSet().add("aa", "bbbb");
					operations.opsForSet().add("啊阿", "撒大大是");
					
					//这将包含事务中所有操作的结果
					return operations.exec();
				}
				
			});

			2.使用注解开启事务：
				1.默认情况下，事务支持已禁用，必须RedisTemplate通过设置为每个使用中显式启用setEnableTransactionSupport(true)
				2.配置
					@Configuration
					public class RedisConfiguration {
					 
					    @Bean
					    public StringRedisTemplate redisTemplate(RedisConnectionFactory redisConnectionFactory) {
					        StringRedisTemplate template = new StringRedisTemplate();
					        template.setConnectionFactory(redisConnectionFactory);
					        template.setEnableTransactionSupport(true); //打开事务支持
					        return template;
					    }
					    
					    /**
					     * 	交易管理需要一个PlatformTransactionManager。Spring Data Redis不附带PlatformTransactionManager实现。假设您的应用程序使用JDBC，Spring Data Redis可以使用现有的事务管理器参与事务。
					     * @param dataSource
					     * @return
					     * @throws SQLException
					     */
					    //配置事务管理器
					    @Bean//这里可以配置事务的名称，如果有多个事务管理器的话，比如还存在Mysql的事务管理器(name="redisTransactionManager")
					    public PlatformTransactionManager transactionManager(DataSource dataSource) throws SQLException {
					        return new DataSourceTransactionManager(dataSource);
					    }
					}

				3.使用:直接在方法上添加@Transactional即可


		4.spring redis 操作Redis接口：
			官方文档：https://docs.spring.io/spring-data/redis/docs/2.1.10.RELEASE/reference/html/#redis:template

			接口							描述
			密钥类型操作

			GeoOperations 				Redis的地理空间操作的，比如GEOADD，GEORADIUS...

			HashOperations 				Redis哈希操作

			HyperLogLogOperations 		Redis的HyperLogLog操作，例如PFADD，PFCOUNT，...

			ListOperations 				Redis列表操作

			SetOperations 				Redis设置了操作



			ValueOperations 			Redis字符串（或值）操作



			ZSetOperations 				Redis zset（或排序集）操作



			键绑定操作

			BoundGeoOperations 			Redis键绑定地理空间操作



			BoundHashOperations 		Redis散列键绑定操作



			BoundKeyOperations 			Redis键绑定操作



			BoundListOperations 		Redis列出键绑定操作



			BoundSetOperations 			Redis设置键绑定操作
 


			BoundValueOperations 		Redis字符串（或值）键绑定操作



			BoundZSetOperations 		Redis zset（或有序集）键绑定操作


		5.使用Redis管道：管道技术最显著的优势是提高了 redis 服务的性能。
		
			List<Object> results = redis.executePipelined(
			  new RedisCallback<Object>() {
			    public Object doInRedis(RedisConnection connection) throws DataAccessException {
			      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;
			      for(int i=0; i< 10; i++) {
			        stringRedisConn.rPop("myqueue");
			      }
			    return null;	//从中返回的值RedisCallback必须为null，因为此值将被丢弃，以支持返回流水线命令的结果
			  } 
			});






