UI框架介绍：
	1.Touch WX:http://www.wetouch.net/touchwx_doc/

1.自定义组件：
		自定义组件文档:https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/

		组件参数配置文档：https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html

		1.创建组件：
			1.在组件.json下设置:
				{
				  "component": true
				}

			2.在组件.js下，需要用Component构造器来注册：
				Component文档:https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html	

				Component构造器文档:https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html

				Component({
				  properties: {
				    // 这里定义了innerText属性，属性值可以在组件使用时指定
				    innerText: {
				      type: String,
				      value: 'default value',
				    }
				  },
				  data: {
				    // 这里是一些组件内部数据
				    someData: {}
				  },
				  methods: {
				    // 这里是一个自定义方法
				    customMethod: function(){}
				  }
				})

		2.使用组件:
			直接在.json文件里设置:
				"usingComponents": {
	    			"标签名称": "组件路径"
	  			}

	  			如：
	  			"usingComponents": {
	    			"my-component": "/components/custom-component"
	  			}


	  	3.组件的生命周期：
	  		文档：https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html
	  		1.组件所在页面的生命周期：
	  			show	无	组件所在的页面被展示时执行	2.2.3
				hide	无	组件所在的页面被隐藏时执行	2.2.3
				resize	Object Size	组件所在的页面尺寸变化时执行	2.4.0

		4.组件间的通信和事件：
			文档：https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html

			组件间的基本通信方式有以下几种。
				1.WXML 数据绑定：用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容数据（自基础库版本 2.0.9 开始，还可以在数据中包含函数）。具体在 组件模板和样式 章节中介绍。

				2.事件：用于子组件向父组件传递数据，可以传递任意数据。

				3.如果以上两种方式不足以满足需要，父组件还可以通过 this.selectComponent 方法获取子组件实例对象，这样就可以直接访问组件的任意数据和方法。

	2.组件样式:

		1.组件对应 wxss 文件的样式，只对组件wxml内的节点生效。注意：
			1.组件和引用组件的页面不能使用id选择器（#a）、属性选择器（[a]）和标签名选择器，请改用class选择器。

			2.组件和引用组件的页面中使用后代选择器（.a .b）在一些极端情况下会有非预期的表现，如遇，请避免使用。

			3.子元素选择器（.a>.b）只能用于 view 组件与其子节点之间，用于其他组件可能导致非预期的情况。

			4.继承样式，如 font 、 color ，会从组件外继承到组件内。

			5.除继承样式外， app.wxss 中的样式、组件所在页面的的样式对自定义组件无效（除非更改组件样式隔离选项）。

		2.在WXSS里导入其他样式：
			在WXSS文件下使用如下代码即可：
				@import "nav-bottom-font/iconfont.wxss";


2.路由：

	API文档：https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html

	路由组件：https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html

	1.switchTab：跳转到tabBar（即底部tab栏的表现）页面，这个tabBar是在app.json下设置的，可以使用官方自带的导航栏，也可以自定义样式的导航栏
		注：
			1.该跳转方式不能带有参数
			2.该跳转方式再每次跳转的时候，都会触发onshow等事件，具体看文档

		(1)系统自带的tabBar文档：	
			https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar

		(2)自定义tabBar:	
			1.文档:https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html
			2.配置：
				1.在app.json 中的 tabBar 项指定 custom 字段，同时其余 tabBar 相关配置也补充完整。
				2.所有 tab 页的 json 里需声明 usingComponents 项，也可以在 app.json 全局开启。

	2.navigateTo：保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。

	3.navigateBack：关闭当前页面，返回上一页面或多级页面。

	3.redirectTo：关闭当前页面，跳转到应用内的某个页面。

	4.reLaunch：关闭所有页面，打开到应用内的某个页面


	5.页面跳转传递参数：在onLoad里传递参数，直接options.属性 获取即可
		  /**
		   * 生命周期函数--监听页面加载
		   * 传递的参数:/pages/goodsDetails?itemid=1234679
		   */
		  onLoad: function (options) {
		    console.log(options.itemId)
		    wx.request({
		      url: app.globalData.serverHost + '/product/' + itemId,
		      success: function (res) {
		        console.log(res)
		      }
		    })
		  },



3.页面：

	官方文档：https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html|	
	1.注册页面



4.关于WXML：和VUE类似

	官方文档：https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/

	1.数据绑定：https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/data.html
		普通的数据绑定：
		js： 
			data: {
			    userInfo:{id:'1312wqe',nickname:'阿信'}
			},

		WXML:
			<template is='loginUserInfo' data='{{userInfo}}'></template>


			<template name='loginUserInfo'>
			    <view class='userInfo'>
			      <image src="/images/index/2.jpg" bindtap='aa'></image>
			      <view class='loginUserInfo'>
			        {{userInfo.id}}{{userInfo.nickname}}
			      </view>
			    </view>
			</template>


	2.列表渲染：https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html

	3.条件渲染：https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html

	4.模板：WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。
		https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/template.html

		1.外部导入模板和模板样式：
			模板文件:goodsSpec.wxml
				<template name="goodsSpec">
				  <view class="goodsSpec">啊啊啊</view>
				</template>  

			模板样式:goodsSpec.wxss

			page页面:
				1.外部引入wxml和wxss，2.使用模板

				BB.wxml：
					<import src="/templates/alerts/goodsSpec.wxml"/>
					<template is="goodsSpec" data="{{goods}}"></template>

				BB.wxss:
					@import "/templates/alerts/goodsSpec.wxss";

				关于模板里的data要在BB页面中定义,然后传递到模板里


		2.同一个页面下使用模板：
			js： 
				data: {
				    userInfo:{id:'1312wqe',nickname:'阿信'}
				},

			WXML:

			<template is='loginUserInfo' data='{{userInfo}}'></template>


			<template name='loginUserInfo'>
			    <view class='userInfo'>
			      <image src="/images/index/2.jpg" bindtap='aa'></image>
			      <view class='loginUserInfo'>
			        {{userInfo.id}}{{userInfo.nickname}}
			      </view>
			    </view>
			</template>

	5.模块化,引入外部js或者第三方js文件：
		1.引入第三方js文件：
			1.将moment.min.js放在小程序工程的utils目录下
				util.js:
					const moment = require('moment.min.js');
						function timestampToString(timestamp,str) {
						  moment.locale('en', {
						    longDateFormat: {
						      l: "YYYY-MM-DD",
						      L: "YYYY-MM-DD HH:mm:ss"
						    }
						  });
						  return moment(timestamp).format(str);
						}

			2.使用：
				var util = require("../../../util/util.js”);
				let timestamp = '1546841820000';//时间戳或者别的格式的时间皆可
				let time = util.timestampToString(timestamp, 'L');


	6.API：
		文档：https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html
		
		1.SelectorQuery：查询节点信息的对象
			1.wx.createSelectorQuery()：返回一个 SelectorQuery 对象实例，在自定义组件或包含自定义组件的页面中，应使用 this.createSelectorQuery() 来代替。 
			2.具体方法见文档
			3.对象的方法简单介绍：
				1.SelectorQuery.exec(function callback)
					执行所有的请求。请求结果按请求次序构成数组，在callback的第一个参数中返回。
				2.SelectorQuery.select(string selector）
					在当前页面下选择第一个匹配选择器 selector 的节点。返回一个 NodesRef 对象实例，可以用于获取节点信息

						selector类似于 CSS 的选择器，但仅支持下列语法。
							ID选择器：#the-id
							class选择器（可以连续指定多个）：.a-class.another-class
							子元素选择器：.the-parent > .the-child
							后代选择器：.the-ancestor .the-descendant
							跨自定义组件的后代选择器：.the-ancestor >>> .the-descendant
							多选择器的并集：#a-node, .some-other-nodes
				3.SelectorQuery。selectAll(string selector)
					在当前页面下选择匹配选择器 selector 的所有节点。

				4.SelectorQuery.selectViewport()
					选择显示区域。可用于获取显示区域的尺寸、滚动位置等信息
				5.SelectorQuery.in(Component component)
					将选择器的选取范围更改为自定义组件 component 内。（初始时，选择器仅选取页面范围的节点，不会选取任何自定义组件中的节点）。


		2.NodesRef：用于获取 WXML 节点信息的对象
			1.NodesRef SelectorQuery.select(string selector)：在当前页面下选择第一个匹配选择器 selector 的节点。返回一个 NodesRef 对象实例，可以用于获取节点信息
			2.获取方式主要见SelectorQuery对象的方法
			3.对象的方法简单介绍：
				1.fields(Object fields)
					获取节点的相关信息。需要获取的字段在fields中指定
				2.boundingClientRect(callback)
					添加节点的布局位置的查询请求。相对于显示区域，以像素为单位。其功能类似于 DOM 的 getBoundingClientRect。返回 NodesRef 对应的 SelectorQuery
				3.scrollOffset(function callback)
					添加节点的滚动位置查询请求。以像素为单位。节点必须是 scroll-view 或者 viewport，
				4.context(function callback)
					添加节点的 Context 对象查询请求


		3.例子:
				该方法的里的一个参数是回调函数，在执行 SelectorQuery.exec 方法后，节点信息会在 callback 中返回，所以获取之后要设置属性还是啥只需要在回调函数里操作即可。
				boundingClientRect(function(rect){
					...
				})

				例子：
					var that = this;		//this是page对象
					wx.createSelectorQuery().selectAll('.swiper_image').boundingClientRect(function(rects){
				        rects.forEach(function (rect) {
				          that.setData({
				            swiperHeight:rect.height
				          });
				        });
				      }).exec();

				例子2：
					wx.createSelectorQuery().select('#the-id').boundingClientRect(function(rect){
				      rect.id      // 节点的ID
				      rect.dataset // 节点的dataset
				      rect.left    // 节点的左边界坐标
				      rect.right   // 节点的右边界坐标
				      rect.top     // 节点的上边界坐标
				      rect.bottom  // 节点的下边界坐标
				      rect.width   // 节点的宽度
				      rect.height  // 节点的高度
				    }).exec()


5.事件系统：
	文档：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html
	事件大全：
		touchstart	手指触摸动作开始	
		touchmove	手指触摸后移动	
		touchcancel	手指触摸动作被打断，如来电提醒，弹窗	
		touchend	手指触摸动作结束	
		tap	手指触摸后马上离开	
		longpress	手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发	1.5.0
		longtap	手指触摸后，超过350ms再离开（推荐使用longpress事件代替）	
		transitionend	会在 WXSS transition 或 wx.createAnimation 动画结束后触发	
		animationstart	会在一个 WXSS animation 动画开始时触发	
		animationiteration	会在一个 WXSS animation 一次迭代结束时触发	
		animationend	会在一个 WXSS animation 动画完成时触发	
		touchforcechange	在支持 3D Touch 的 iPhone 设备，重按时会触发

	事件对象：
		type	String	事件类型	
		timeStamp	Integer	事件生成时的时间戳	
		target	Object	触发事件的组件的一些属性值集合	
		currentTarget	Object	当前组件的一些属性值集合	
		mark	Object	事件标记数据
		

注意：
	1.图片的自适应，image标签，随着宽度的自适应高度，使用该属性即可“mode="widthFix" ”
	2.设置data（一定要用这种方式）：
		this.setData(object);
		如：this.setData({
			aa:'哈哈',
			bb:11
		})

		动态设置数组：
			var key = 'carts[' + index + ']'
	        var resCart = res.data.data

	        that.setData({
	          [key]: resCart
	        })

	3.获取data：
		this.data.属性
		如：this.data.aa

	4.条件渲染，经常切换的最好使用hidden(是hidden而不是wx:hidden),而不是使用wx:if
	5.数据绑定：
		可以看文档：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html
		格式：data-属性名="值"
		如；<view id="tapTest" data-hi="WeChat" bindtap="tapName"> Click me! </view>
		
		JS:如event.target.dataset.hi
			通过以下方式来访问
			"target": {
			    "id": "tapTest",
			    "dataset":  {
			      "hi":"WeChat"
			    }





WXSS:
	1.修改复选框默认样式：
		/* 未选中的 背景样式 */
		checkbox .wx-checkbox-input{
		  border-radius: 100% !important;
		}

		/* 选中后的 背景样式 （红色背景 无边框 可根据UI需求自己修改） */
		checkbox .wx-checkbox-input.wx-checkbox-input-checked{
		  border: 1rpx solid rgb(231, 24, 102);
		  background: rgb(231, 24, 102);
		}

		/* 选中后的 对勾样式 （白色对勾 可根据UI需求自己修改） */
		checkbox .wx-checkbox-input.wx-checkbox-input-checked::before{
		  text-align: center;
		  font-size:30rpx; /* 对勾大小 30rpx */
		  color:#fff; /* 对勾颜色 白色 */
		  background: transparent;
		}

	2.去除按钮原样式：
		button::after { border: none; }



开放接口：
	1.获取用户信息，如用户昵称，所在省市等
		文档：https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html
		直接使用标签即可：
			<!-- 如果只是展示用户头像昵称，可以使用 <open-data /> 组件 -->
			<open-data type="userAvatarUrl"></open-data>
			<open-data type="userNickName"></open-data>
			<!-- 需要使用 button 来授权登录 -->
			<button wx:if="{{canIUse}}" open-type="getUserInfo" bindgetuserinfo="bindGetUserInfo">授权登录</button>
			<view wx:else>请升级微信版本</view>



		在获取用户信息之前可以先查看是否授权：
			// 查看是否授权
		    wx.getSetting({
		      success (res){
		        if (res.authSetting['scope.userInfo']) {
		          // 已经授权，可以直接调用 getUserInfo 获取头像昵称
		          wx.getUserInfo({
		            success: function(res) {
		              console.log(res.userInfo)
		            }
		          })
		        }
		      }
		    })

	2.小程序登录：https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html
		1.获取oppenid和sessionkey
		
		2.login: function(){
		    wx.login({
		      success: function (res) {
		        /**
		         * 发出请求授权登陆
		         * 这里的URI是服务器里设置的URI
		         **/
		        wx.request({
		          url: 'http://127.0.0.1/wxLogin',
		          data: {
		            js_code: res.code,		//用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用 auth.code2Session，使用 code 换取 openid 和 session_key 等信息
		          },
		          success: function (res) {
		            console.log(res)
		          }
		        })
		      }   
		    })    
		  },


	  	3.服务器请求设置：服务器端用RestTemplate发送请求获取或用户唯一ID和用户的session_key
	  		URIBuilder uri = new URIBuilder(); 
			uri.addParameter("grant_type", wxGrant_type);
			uri.addParameter("appid",wxAppid);
			uri.addParameter("secret",wxSecret);
			uri.addParameter("js_code", jsCode);
			
			uri.setHost("api.weixin.qq.com");					//设置主机
			uri.setPath("/sns/jscode2session");					//设置path
			uri.setScheme("https");	

			String res = restTemplate.getForObject(uri.toString(), String.class);


	3.授权：https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html
		1.获取用户授权设置
		开发者可以使用 wx.getSetting 获取用户当前的授权状态

		2.发出授权请求：
			wx.authorize(Object object)

			// 查看是否授权
		    wx.getSetting({
		      success (res){
		        if (res.authSetting['scope.userInfo']) {
		          // 已经授权，可以直接调用 getUserInfo 获取头像昵称
		          wx.getUserInfo({
		            success: function(res) {
		              console.log(res.userInfo)
		            }
		          })
		        }
		      }
		    })

	4.数据缓存：https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html

	5.小程序的生命周期：

		1.小程序的生命周期(APP.js):
			文档：https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html

			// app.js
			App({
			  onLaunch (options) {
			    // Do something initial when launch.
			  },
			  onShow (options) {
			    // Do something when show.
			  },
			  onHide () {
			    // Do something when hide.
			  },
			  onError (msg) {
			    console.log(msg)
			  },
			  globalData: 'I am global data'
			})

		2.页面的生命周期：
			详见文档：https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html

组件：
	1.滚动选择器（picker）：从底部弹起的滚动选择器。
		文档：https://developers.weixin.qq.com/miniprogram/dev/component/picker.html
		如：

		原理:当选择器的值改变的时候，会触发事件，然后在事件里通过e.detail.value获取值
		WXML：
			<picker mode='region' bindchange='bindRegionChange' >
		        <input class='picker' name='region' placeholder="省份、城市、区县" value='{{region[0]}}，{{region[1]}}，{{region[2]}}' disabled="false"></input>
		      </picker>

		JS:
		bindRegionChange:function(e){
		    var region = e.detail.value
		    this.setData({
		      region:region
		    })
		  }


	2.多项选择器（checkbox-group）：
		checkbox-group：只要选择或者取消选择 都会触发bindchange里的函数
		WXML:
			<checkbox-group bindchange="checkboxChange" >
				<checkbox value="{{item.id}}" checked=""/>
			</checkbox-group>

		JS:
			函数：通过e.detail.value就可以获取数组,即<checkbox>里选中的的value的值
			checkboxChange:function(e){
		      this.setData({
		        selectedCarts:e.detail.value
		      })
		    }



form表单提交,post请求:

	WXML:
		<form bindsubmit="formSubmit">
		  <view class='main'>
		      <input placeholder="姓名" name='name' value='{{address.name}}' ></input>
		  </view>

		  <view class='fotter'> 
		    <button formType="submit">保存</button>
		    <button bindtap="deleteAddress">删除</button>
		  </view>
		</form>
	

	JS：发送POST请求,使用header为'application/json',参数使用统一的格式

		wx.request({
	      url: app.globalData.serverHost + '/address/updateAddress', 
	      method:'post',
	      data:{
	        requestParam:{
	          address:address,
	          user:'其他的参数,让java后台方便解析'
	        }
	      },
	      header: { 
	        //"Content-Type": "application/x-www-form-urlencoded"
	        "Content-Type": "application/json" 
	      },
	      success:function(res){
	        console.log(res.data) 
	      }  
	    })


	java后台：用@requestBody来接受所有参数
		@PostMapping("/updateAddress")
		public ResponseData updateAddress(@RequestBody JSONObject jsonObject){
			Address address = jsonObject.getJSONObject("requestParam").getJSONObject("address").toJavaObject(Address.class);
			System.out.println(address);
			System.out.println(addressService.updateAddress(address));
			return ResponseDataUtil.buildSuccess(address);
		}




实现双向绑定(通过bindXXX事件来实现)：
	查看 API 文档就发现，状态可以发生改变的组件都会有一些以 “bind” 单词打头的属性，比如 “bindinput”、“bindblur” 等，这些属性绑定一个方法，方法的参数获取一个对象 event 。当组件的值发生改变时，方法被触发，方法内使用 event.detail.value 就可以获取组件的最新值

	如：
		<input placeholder="姓名" name='name' value='{{address.name}}' bindinput="aaa" data-name='name'></input>

		aaa:function(e){
			this.setData({
				address.name:e.detail.value
			})
		}