ECAMScript：
	详细文档：http://es6.ruanyifeng.com/#docs/promise

	JS包含3部分：
		1.ECAMScript核心
		2.扩展-》浏览器端
		3.服务器端，如node

	ES5:
		1.严格模式：
			1.1使用：直接在全局的第一条定义   'use strict'; 即可
			
			1.2：语法和行为： 
				1.必须用var声明变量
				2.禁止自定义的函数中的this指向window
				3.创建了eval()的局部作用域，不会污染全局作用域，在非严格模式下，eval会污染全局作用域,eval就是将字符串变成JS代码执行
				4.对象不能有重明的属性

		2.JSON对象：
			1.JSON.stringify(obj/arr)		//js对象(数组)转换为json对象(数组)
			2.JSON.parse(json字符串)			//json字符串转化为js对象

		3.Object的扩展：
			详见文档：http://es6.ruanyifeng.com/#docs/object
			继承对象：
				1.使用Object.create(obj,newProperty...)
				2.使用Object.defineProperties(obj,descriptors)

		4.数组的扩展：https://www.runoob.com/jsref/jsref-foreach.html

		5.apply,call,bind,函数对象的方法:

			call(obj,...properties):将this指向obj，this不再是外部的对象，或者window，而是obj参数：
				如：
					var user = {
						username : '德莱文',
						age : 18
					}
					function f(){
						console.log(this);
					}
					f.call(user);		//则打印的是user对象，而不是window对象

			apply(obj,[]):和call的本质一样，只是第二个参数必须是数组，传入的参数放在数组里。:
				如：
					var user = {
						username : '德莱文',
						age : 18
					}
					function f(data,age){
						console.log(this + "," + data + ","+age);
					}
					f.apply(user,['哈哈',18]);

			bind(obj):将函数返回，而不会调用，如，f.bind(user)为函数返回，然后接着('哈哈')调用即可

				var fn2= fn.bind(obj,a,b)是将函数返回,传参跟call一样, 通常用于指定回调函数的this


				var user = {
					username : '德莱文',
					age : 18
				}
				function f(data){
					console.log(this.username + "," + data );
				}
				f.bind(user)('哈哈');

				如果为匿名函数:
					function (){}.bind(obj)

		6.变量：
			let:不可以重复声明，允许你声明一个作用域被限制在块级中的变量、语句或者表达式,let声明的变量只能是全局或者整个函数块的。
				块级作用域：
					var bbbs = document.getElementsByClassName('bbb');
					for(var i = 0; i < bbbs.length; i++){
						console.log(bbbs[i]);
						bbbs[i].onclick = function (){
							console.log(i);		//则会一直是3，如果i用let来定义，则是块级作用域，则是1
						}
					}
			const:常量

		7.解构赋值：
			从数组和对象中提取值，对变量进行赋值。是对变量赋值，对变量赋值

			如：
				1.解构对象
				var obj = {username:'德莱文',age:18};
				let {username,age} = obj;		//声明的username和age变量，然后用obj来赋值

				2.解构数组：
				var arr = [1,2,3,true,'aa啊阿'];
				let [a,b,c,d,e] = arr;			//声明的a,b,c,d,e变量，用数组来赋值

		8.形参默认值:
			参数默认值，如果不传入参数，则会默认使用默认值，跟java几个构造函数是一个意思
			function Persion(name="阿信",age=20){
				console.log(name + "," + age);
			}
			Persion();
			Persion('aa',11);

		9.Promise 对象:
			Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。

			创建Promise对象：resolve等于是成功,reject等于是失败，promise只需要传入两个对象即可，一个是成功后的回调，一个是失败后的回调

			//定义Promise对象
			let promise = new Promise((resolve,reject) => {
				var ajaxResult = true;
				if(ajaxResult){
					resolve();
				}else{
					reject();
				}
			});
			//then方法分别指定resolved状态和rejected状态的回调函数。
			promise.then(
				//resolve函数,可以传参
				() => {
					console.log("成功的回调函数");
				},
				//reject函数,可以传参
				() => {
					console.log("失败的回调函数");
				}
			)

		10.回调函数：
			A调用B的的方法，然后B的方法里又调用（回调，）A的方法，在B的方法里传入A对象即可。

		11.generator函数：
			相当于java的一个同步线程，只是可以控制暂停和继续而已。generator函数调用next()的时候才会执行，遇到yiled就会暂停

			yield 表达式:就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。当遇到yield的时候就会暂停。
				表达式也可以是个函数：
					yield getName('哈哈');

				generator函数API：
					
					1.next();	//开始或继续
					2.yield 表达式;	//表示暂停
					3.return();		//跟next一样，可以传参，只是表示结束线程，结束当前函数
					4.throw()；		//抛出异常


			格式:function * 名字(){..}
			如：function * aa(){}

			例子：
				function * myGenerator(){
					console.log("开始");
					yield '完成第一阶段';
					console.log("第二步");
					yield '完成第二阶段任务';
				}

				let mg = myGenerator();
				console.log(mg.next());		//返回的对象：{value: "完成第一阶段", done: false}
				console.log(mg.next());		//返回的对象：{value: "完成第二阶段", done: false}
				console.log(mg.next());		//返回的对象：{value: undefined, done: true}	如果done属性为true，说明generator函数已经执行完
