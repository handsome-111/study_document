Mongodb-java-driver:MongoDB驱动程序
	1.
		1.java-driver官方文档：http://mongodb.github.io/mongo-java-driver/3.10/
		2.spring Mongodb文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/
		3.spring boot Mongodb文档：

	2.在spring boot里配置mongodb:
		spring:
		 	data:
			    mongodb:
			      uri: mongodb://hdgj:123456@127.0.0.1:27017/hdgj


	3.使用Spring data Repository来操作Mongodb
		官方文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/reference/html/#repositories
		1.定义实体：
			1.定义实体的注解:
				@Id - 用于字段级别，标记这个字段是一个主键，默认生成的名称是“_id”

				@Document - 用于类，以表示这个类需要映射到数据库，您也可以指定映射到数据库的集合名称

				@DBRef - 用于字段，以表示它将使用com.mongodb.DBRef进行存储。

				@Indexed - 用于字段，表示该字段需要如何创建索引

				@CompoundIndex - 用于类，以声明复合索引

				@GeoSpatialIndexed - 用于字段，进行地理位置索引

				@TextIndexed - 用于字段，标记该字段要包含在文本索引中

				@Language - 用于字段，以设置文本索引的语言覆盖属性。

				@Transient - 默认情况下，所有私有字段都映射到文档，此注解将会去除此字段的映射

				@PersistenceConstructor - 标记一个给定的构造函数，即使是一个protected修饰的，在从数据库实例化对象时使用。构造函数参数通过名称映射到检索的DBObject中的键值。
				
				@Value - 这个注解是Spring框架的一部分。在映射框架内，它可以应用于构造函数参数。这允许您使用Spring表达式语言语句来转换在数据库中检索的键值，然后再用它来构造一个域对象。为了引用给定文档的属性，必须使用以下表达式：@Value("#root.myProperty")，root要指向给定文档的根。

				@Field - 用于字段，并描述字段的名称，因为它将在MongoDB BSON文档中表示，允许名称与该类的字段名不同。

				@Version - 用于字段锁定，保存操作时检查修改。初始值是0，每次更新时自动触发。
		2.定义Repository接口：
			模板:
				interface PersonRepository extends Repository<类名, Id或主键类型> { … }
			例子：
				interface PersonRepository extends Repository<Person, Long> { … }
			2.

		3.使用MongoTemplate:
			api文档：https://docs.spring.io/spring-data/mongodb/docs/2.1.10.RELEASE/api/
			1.MongoOperations,MongoOperations 是实现MongoTemplate的接口

			批量插入：MongoTemplate.insertAll(Collection<? extends Object> objectsToSave)
   
			批量更新：MongoTemplate.updateMulti(Query query, Update update, Class<?> entityClass)

			


1.通过java-mongodb-driver来操作Mongodb：
		1.通过MongoTemplate获取Mongo集合，MongoCollection：
				MongoCollection collection = mongoTemplate.getCollection("user");

		2.Filter过滤器，实现BSON的类
			1.运算的方法：
				eq：匹配等于指定值的值。
				gt：匹配大于指定值的值。
				gte：匹配大于或等于指定值的值。
				lt：匹配小于指定值的值。
				lte：匹配小于或等于指定值的值。
				ne：匹配所有不等于指定值的值。
				in：匹配数组中指定的任何值。
				nin：匹配数组中指定的值。

			2.逻辑运算符方法包括：
				and：使用逻辑AND连接过滤器，并选择与两个过滤器的条件匹配的所有文档。
				or：使用逻辑OR连接过滤器，并选择符合任一过滤条件的所有文档。
				not：反转查询表达式的效果并选择与筛选器不匹配的文档。
				nor：使用逻辑NOR连接过滤器，并选择无法匹配两个过滤器的所有文档。

			3.数组运算符方法包括：
				all：匹配包含查询中指定的所有元素的数组
				elemMatch：如果数组字段中的元素与所有指定的$ elemMatch条件匹配，则选择文档
				size：如果数组字段是指定大小，则选择文档

			4.元素运算符方法包括：
				exists：选择具有指定字段的文档。
				type：如果字段是指定类型，则选择文档。

			5.评估运算符方法包括：
				mod：对字段的值执行模运算，并选择具有指定结果的文档。
				regex：选择值与指定正则表达式匹配的文档。
				text：选择与全文搜索表达式匹配的文档。
				where：匹配满足JavaScript表达式的文档。

			6.MongoDB 3.2提供的按位查询运算符包括：
				bitsAllSet：选择设置字段的所有指定位的文档（即1）。
				bitsAllClear：选择字段的所有指定位清零的文档（即0）。
				bitsAnySet：选择至少设置一个字段的指定位的文档（即1）。
				bitsAnyClear：选择字段中至少有一个指定位清零的文档（即0）

			7.地理空间操作员方法包括：
				geoWithin：选择包含字段的所有文档，该字段的值是GeoJSON几何体，该几何体位于边界GeoJSON几何体内。
				geoWithinBox：选择包含具有完全位于指定框内的网格坐标数据的字段的所有文档。
				geoWithinPolygon：选择包含具有完全位于指定多边形内的网格坐标数据的字段的所有文档。
				geoWithinCenter：选择包含具有完全位于指定圆内的网格坐标数据的字段的所有文档。
				geoWithinCenterSphere：使用球面几何选择包含具有完全位于指定圆内的地理空间数据（GeoJSON或传统坐标对）的字段的几何。
				geoIntersects：选择与GeoJSON几何体相交的几何。2dsphere索引支持$ geoIntersects。
				near：返回点附近的地理空间对象。需要地理空间索引。2dsphere和2d指数支持$ near。
				nearSphere：返回球体上某点附近的地理空间对象。需要地理空间索引。2dsphere和2d索引支持$ nearSphere。


		5.以文件的方式读写MongoDB
			文档：http://mongodb.github.io/mongo-java-driver/3.10/bson/readers-and-writers/