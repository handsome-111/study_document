Vue:
	1.Vue实例的生命周期：
		1.beforeCreate:Vue实例创建之前，this里的属性不能调用，即是未定义的，this指的是Vue实例
		2.created:Vue实例已经创建，this里的属性就可以调用了。
		3.beforeMount:模板已经在内存中编译完成，但未把模板渲染到页面中，如何测试？直接在这个函数里使用document.getElementById(),获取测试有没有值即可
		4.mouted:实例已经完全被创建好了

		例子:
			new Vue(){
				el:"",
				beforeCreate :() =>{},
				created: () => {},
				beforeMount: () => {},
				mouted:() => {}
			}

	2.vue-resource:发起get,post,jsonp发起请求
	
		详见文档：https://www.runoob.com/vue2/vuejs-ajax.html

		1.导入vue-resource.js文件
		2.
		// 基于全局Vue对象使用http
		Vue.http.get('/someUrl', [options]).then(successCallback, errorCallback);
		Vue.http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);

		// 在一个Vue实例内使用$http
		this.$http.get('/someUrl', [options]).then(successCallback, errorCallback);
		this.$http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);

		3.格式：	
			get(url, [options])
			head(url, [options])
			delete(url, [options])
			jsonp(url, [options])
			post(url, [body], [options])
			put(url, [body], [options])
			patch(url, [body], [options])

	3.Vue动画：
		Vue的动画比较简单，不如CSS3里的


	4.组件
		1.组件化和模块化的区别
			1.组件化是从UI界面的角度去划分的
			2.模块化是从代码的逻辑进行划分的

		2.创建组件：
			1.使用Vue.extend来创建组件
				1.使用ue.extend()方法来创建组件
				2.使用Vue.component()来声明组件
				3.使用组件需要注意大小写，大小写之间用'-'来连接，例子如下
				4.注意：在template属性里只能有一个标签，不能有多个
				4.例子：
					<div id="app">
						<my-com1></my-com1>	   			
					</div>

					<script type="text/javascript">
						//创建组件模板
						var com1 = Vue.extend({
							template:'<h1>这是我自己创建的组件{{message}}</h1>'
						})

						Vue.component('myCom1',com1);	//声明组件，大小写之间必须用'-'来连接

						new Vue({
							el:"#app",
						})
					</script>

			2.创建组件模板的最佳方式:
				<div id="app">
					<my-com1></my-com1>	   			
				</div>

				Vue.component('myCom1',{
					template: '<h1>这是我自己创建的组件</h1>'
				});	

			3.使用<template>来创建组件
				1.在app的外层使用template标签定义模板
				2.直接通过Vue.component来定义全局组件，并指定模板组件
				3.例子：
					<div id="app">
						<my-com1></my-com1>		
					</div>

					<template id="aaa">
						<!-- 最外层一定只有一个div -->
						<div>
							<h1>欢迎来到德莱联盟</h1>
							<h4>哈哈哈</h4>
						</div>
					</template>

					<script type="text/javascript">

						Vue.component('myCom1',{
							template:'#aaa'
						});	


						new Vue({
							el:"#app",
						})
					</script>

			4.创建私有组件（建议采用的方法）:
				1.使用components属性来声明私有组件
				2.在组件里声明模板，并且使用即可
				3.例子：
					<div id="app">
						<my-com1></my-com1>		
					</div>

					<template id="aaa">
						<!-- 最外层一定只有一个div -->
						<div>
							<h1>欢迎来到德莱联盟</h1>
							<h4>哈哈哈{{ message }}</h4>
						</div>
					</template>

					<script type="text/javascript">
						new Vue({
							el:"#app",
							//声明局部组件
							components:{
								//声明自定义模板
								myCom1:{
									template:'#aaa',
									data:function(){
										return {message:'模板局部data'}
									}，
									methods:{
										aa:function(){...}
									}
								}
							}
						})
					</script>

			5.组件里的的data
				1.组件里的是一个函数和实例中的data不一样，组件里的data是一个函数，返回值是一个object，该函数是个匿名函数，所以返回的值也是模板局部的值
				2.因此，组件也有自己的methods，所以也可以在methods里写ajax
				3.例子：
					见上面的例子

			5.动态组件：
				1.尝尝用于组件切换，比如注册和登录的切换，通过v-if和修改data的值来使用
				2.通过component来切换组件，:is里的值是一个属性（是属性名，不是属性值），通过改变属性的值来切换模板名称

				<div id="app">
					<!-- 2.通过点击修改属性的值来切换模板 -->
					<button @click="myCom='myCom1'">切换1</button>
					<button @click="myCom='myCom2'">切换2</button>
					<!-- 1.属性名为myCom的模板 -->
					<component :is="myCom"></component>
				</div>

				<!-- 定义的两个模板 -->
				<template id="aaa">
					<!-- 最外层一定只有一个div -->
					<div>
						<h1>欢迎来到德莱联盟</h1>
						<h4>哈哈哈{{ message }}</h4>
					</div>
				</template>

				<template id="bbb">
					<!-- 最外层一定只有一个div -->
					<div>
						<h1>111111</h1>
						<h4>哈哈哈{{ message }}</h4>
					</div>
				</template>



				<script type="text/javascript">
					new Vue({
						el:"#app",
						data : {
							myCom :'myCom1'
						},
						//声明局部组件
						components:{
							//声明自定义模板
							myCom1:{
								template:'#aaa',
								data:function(){
									return {message:'模板局部data'}
								}
							},
							myCom2:{
								template:"#bbb",
								data:function(){
									return {message:'you son of bitch'}
								}
							}
						}
					})
				</script>

			6.作用和场景:
				
	5.路由:
		后端路由：对于普通的网站，所有的超链接都是URL地址，对应服务器上不同的资源
		前端路由：在单页面应用程序中，通过hash(就是#号)改变来切换页面的方式，叫做前端路由

		Vue-router文档：https://router.vuejs.org/guide/#html

		vue-router： 前端路由
			1.导入vue-router文件:<script src="./vue-router.js"></script>
				一旦导入了以上文件之后，就会在URL末尾添加#，
				如：file:///C:/Users/Administrator/Desktop/%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/vue/index.html#/

			2.创建路由对象
				const router = new VueRouter({...});

	6.访问令牌(access token):
		token的认证流程:
			1客户端使用用户名、密码做身份验证；
			2.服务端收到请求后进行身份验证；(也可能是统一登录平台、网关)
			3.验证成功后，服务端会签发一个Token返回给客户端；
			4.客户端收到Token以后可以把它存储起来（可以放在）；每次向服务端发送请求的时候，都要带着Token；
			5.Token会有过期时间，过期后需要重新进行验证；
			6.服务端收到请求，会验证客户端请求里面的Token，验证成功，才会响应客户端的请求；





