mybatisplus:
	1.官方文档:https://mp.baomidou.com/

	2.在spring boot里的配置:
		1.分页插件
			@EnableTransactionManagement
			@Configuration
			@MapperScan("com.youmeng.taotask.mapper*")		//包名为:com.youmeng.taotask.mapper
			public class MybatisPlusConfig {

			    /**
			     * 分页插件
			     */
			    @Bean
			    public PaginationInterceptor paginationInterceptor() {
			        return new PaginationInterceptor();
			    }
			}

		2.配置文件：
			配置数据源：
				spring: 
					datasource: 
					    type: com.zaxxer.hikari.HikariDataSource
					    driver-class-name: com.mysql.cj.jdbc.Driver
					    url:jdbc:mysql://localhost:3308/hdgj?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
					    username: root
					    password: root
					    hikari:
					      minimum-idle: 5
					      idle-timeout: 600000
					      maximum-pool-size: 10
					      auto-commit: true
					      pool-name: MyHikariCP
					      max-lifetime: 1800000
					      connection-timeout: 30000 
					      connection-test-query: SELECT 1

			mybatis-plus: 
  				mapper-locations: classpath:mapper/*Mapper.xml
  				##mapper文件路径存放于resources/mapper 文件夹下
  				configuration:
    				log-impl: org.apache.ibatis.logging.stdout.StdOutImpl   ##显示SQL语句日志




    		Mybatis Plus配置多个数据源
    			@Configuration
				@MapperScan("com.seawaterbt.ssm.mapper*")
				public class MyBatiesPlusConfiguration {

				    /*
				     * 分页插件，自动识别数据库类型
				     * 多租户，请参考官网【插件扩展】
				     */
					/**
				     * 分页插件
				     */
				    @Bean
				    public PaginationInterceptor paginationInterceptor() {
				        return new PaginationInterceptor();
				    }

				    /**
				     * SQL执行效率插件
				     */
				    @Bean
				    @Profile({"dev","qa"})// 设置 dev test 环境开启
				    public PerformanceInterceptor performanceInterceptor() {
				        PerformanceInterceptor performanceInterceptor = new PerformanceInterceptor();
				        performanceInterceptor.setMaxTime(1000);
				        performanceInterceptor.setFormat(true);
				        return performanceInterceptor;
				    }

				    
				    /**
				     * 配置多个数据源
				     * @return
				     */
				    
				    @Bean(name = "db1")
				    @ConfigurationProperties(prefix = "spring.datasource.druid.db1" )
				    public DataSource db1() {
				        return DataSourceBuilder.create().build();
				    }

				    @Bean(name = "db2")
				    @ConfigurationProperties(prefix = "spring.datasource.druid.db2" )
				    public DataSource db2() {
				        return DataSourceBuilder.create().build();
				    }
				    
				    
				    /**
				     * 动态数据源配置
				     * @return
				     */
				    @Bean
				    @Primary
				    public DataSource multipleDataSource(@Qualifier("db1") DataSource db1, @Qualifier("db2") DataSource db2) {
				        MultipleDataSource multipleDataSource = new MultipleDataSource();
				        Map< Object, Object > targetDataSources = new HashMap<>();
				        targetDataSources.put(DataSourceEnum.DB1.getValue(), db1);
				        targetDataSources.put(DataSourceEnum.DB2.getValue(), db2);
				        //添加数据源
				        multipleDataSource.setTargetDataSources(targetDataSources);
				        //设置默认数据源
				        multipleDataSource.setDefaultTargetDataSource(db1);
				        return multipleDataSource;
				    }

				    @Bean("sqlSessionFactory")
				    public SqlSessionFactory sqlSessionFactory() throws Exception {
				        MybatisSqlSessionFactoryBean sqlSessionFactory = new MybatisSqlSessionFactoryBean();
				        sqlSessionFactory.setDataSource(multipleDataSource(db1(),db2()));
				        //sqlSessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:/mapper/*/*Mapper.xml"));

				        MybatisConfiguration configuration = new MybatisConfiguration();
				        //configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);
				        configuration.setJdbcTypeForNull(JdbcType.NULL);
				        configuration.setMapUnderscoreToCamelCase(true);
				        configuration.setCacheEnabled(false);
				        sqlSessionFactory.setConfiguration(configuration);
				        sqlSessionFactory.setPlugins(new Interceptor[]{ //PerformanceInterceptor(),OptimisticLockerInterceptor()
				                paginationInterceptor() //添加分页功能
				        });
				        //sqlSessionFactory.setGlobalConfig(globalConfiguration());
				        return sqlSessionFactory.getObject();
				    }
				 }


			 	public class MultipleDataSource extends AbstractRoutingDataSource {

				    @Override
				    protected Object determineCurrentLookupKey() {
				        return DataSourceContextHolder.getDataSource();
				    }
				}


				public enum DataSourceEnum {

				    DB1("db1"),DB2("db2");

				    private String value;

				    DataSourceEnum(String value){this.value=value;}

				    public String getValue() {
				        return value;
				    }
				}


				public class DataSourceContextHolder {

				    private static final ThreadLocal<String> contextHolder = new InheritableThreadLocal<>();

				    /**
				     *  设置数据源
				     * @param db
				     */
				    public static void setDataSource(String db){
				        contextHolder.set(db);
				    }

				    /**
				     * 取得当前数据源
				     * @return
				     */
				    public static String getDataSource(){
				        return contextHolder.get();
				    }

				    /**
				     * 清除上下文数据
				     */
				    public static void clear(){
				        contextHolder.remove();
				    }
				}


  		3.在pom.xml里扫描文件和依赖：
  			<!-- mybatais plus-->
		    <dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus</artifactId>
				<version>3.0.3</version>
			</dependency> 
		    <dependency>
		        <groupId>com.h2database</groupId>
		        <artifactId>h2</artifactId>
		        <scope>runtime</scope>
		    </dependency>
		    <!-- mybatis plus 启动依赖 -->
			<dependency>
		       	<groupId>com.baomidou</groupId>
		       	<artifactId>mybatis-plus-boot-starter</artifactId>
		       	<version>3.0.1</version>
		  	</dependency>


  			<build>
	  			<!-- 扫描到mybatis的配置文件和yml文件-->
			  	<resources>
			  		<resource>
					  	<directory>src/main/java</directory>
						<includes>
							<include>**/*.xml</include>
						</includes>
					</resource>
					<resource>
					  	<directory>src/main/resources</directory>
						<includes>
							<include>**/**</include>
						</includes>
					</resource>
			  	</resources> 
			</build>

		4.其他事项：
			1.Mapper接口需要用@Mapper注解来定义
			2.mapper.xml文件的namespace对应的是Mapper类
			3.数据源一定要配置好



	3.使用,CURD接口：
		1.Mapper的CURD接口：
			1.文档：https://mp.baomidou.com/guide/crud-interface.html#mapper-crud-%E6%8E%A5%E5%8F%A3

		2.Service的CURD接口

		3.条件构造器：
			官方文档：https://mp.baomidou.com/guide/wrapper.html#abstractwrapper
			AbstractWrapper抽象类，
			AbstractWrapper实现类：
				QueryWrapper(LambdaQueryWrapper)
				UpdateWrapper(LambdaUpdateWrapper) 
				用于生成 sql 的 where 条件, entity 属性也用于生成 sql 的 where 条件

				如：
					QueryWrapper query = new QueryWrapper();
					query.eq("username", "aaa");
					Customer customer = customerMapper.selectOne(query);





Spring mybatis：
	1.官方文档：http://www.mybatis.org/spring/getting-started.html
	2.spring boot myabtis文档：http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/

	2.配置事务管理器：
		@Bean
		public DataSourceTransactionManager transactionManager() {
		  return new DataSourceTransactionManager(dataSource());
		}


	3.Mapper注解配置：
		例子1:
			@Select("select id, name, state, country from city where state = #{state}")
  			City findByState(@Param("state") String state);