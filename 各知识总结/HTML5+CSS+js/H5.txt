HTML5:
	特点:
		1.所有浏览器都支持HTML5。IE9以上支持，IE8及以下不支持
		2.语义特性，本地存储特性，网页多媒体，视频等，二维三维，特效(过渡，动画)
			如：以下都可以适用于任何的块，是任何的块，不仅仅是文档，document,都具备块的属性
				nav:导航
				header:表示页眉，页头
				footer:表示页脚
				main:文档主要内容
				article:文章
				aside:主题内容之外
				footer

		3.
			3.1：input里的type属性新增的属性值
				如：email,url,tel,time,week,range(取值范围),number,month等。
			3.2:input标签新增的属性：
				1.placeholder  ： 占位符，表示背景数字
				2.autofocus :页面加载后自动获取焦点，无需输入属性值，直接用即可
				3.autocomplete :属性值为"on"/"off",启用自动完成功能，条件是使用该属性的标签下也同时带有name属性，而且必须提交成功之后才会记录
				4.required:必须的，必须输入,无属性值
				5.pattern:验证，正则验证
					如手机号：pattern="^(\+86)?1\d{10}$"
				6.multile:属性规定允许用户输入到 <input> 元素的多个值。,比如上传文件，允许上传多个文件
					如：
					上传文件：<input type="file" name="photos" multiple>
					传输多个邮件:<input type="email" name="email" required multiple>   多个邮件必须用逗号隔开，还必须是英文的逗号

				7.form:当一个input标签在form外面的时候，想要同时提交form外面的标签，只需要在外面的标签使用改属性即可，属性值为form的ID
					例：
						<form action="xxx" id="bbb">
							...
						</form>
						<input type="text" required name="bbb" form="bbb">

			3.3:表单新增的元素标签
				datalist:该标签拥有select标签的功能，可以选择，也可以输入文本
				但是该元素必须与input结合使用，如下例子，在input中使用list,这里面type的值可以选择指定的格式，如果option的value属性不满足格式，则不会显示
					<input type="text" list="xxxx" name="qqq" form="abb">
					<datalist id="xxxx">
						<option value="啊阿吖" ></option>
						<option value="阿斯顿啊d" ></option>
						<option value="阿斯顿阿斯顿sa"></option>
					</datalist>


			3.4：表单新增的事件：
				oninput:监听当前指定元素内容的改变，只要内容改变，就会触发这个事件

			3.5:新增的标签:
				进度条：<progress max="100" value="10"></progress>
				度量器：<meter max="100" min="0" high="80" low="40" value="30"></meter>

		4.H5的接口
			1.网络监听接口，监听网络是否中断的，window的事件
			2.全屏显示和退出全屏显示：	
				不同的浏览器需要不同的前缀来兼容：
					谷歌浏览器:webkit	firefox:moz 	ie:ms 		opera:o

				1.全屏:	
					语法:element.前缀+RequestFullScreen();	

					如：div.webkitRequestFullScreen(); 	或 div.oRequestFullScreen();
						因此在兼容浏览器的时候应这样：

							if(div.webkitRequestFullScreen()){
								div.webkitRequestFullScreen();
							} else if(div.oRequestFullScreen()){
								div.oRequestFullScreen();
							} else if(div.msRequestFullScreen()){
								div.msRequestFullScreen();
							} else if(div.mozRequestFullScreen()){
								div.mozRequestFullScreen();
							}
				2.退出全屏:	
					语法:document.前缀+CancelFullScreen();

					如:document.webkitRequestCancelFullScreen();

						兼容所有浏览器：
							if(document.webkitCancelFullScreen()){
								document.webkitCancelFullScreen();
							} else if(document.oCancelFullScreen()){
								document.oCancelFullScreen();
							} else if(document.msCancelFullScreen()){
								document.msCancelFullScreen();
							} else if(document.mozCancelFullScreen()){
								document.mozCancelFullScreen();
							}

				3.判断是否是全屏：
					语法:document.fullscreenElement

						if(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullscreenElement || document.msFullscreenElement){
							return true;
						}else {
							return false;
						}

			3.FileReader:读取文件内容/存储文件内容
				三种读取文件的方式:
					1.readAsText():读取文本内容（可以使用Txt打开的文件），返回文本字符串，默认的编码是UTF-8
					2.readAsBinaryString():读取任意文件类型，返回二进制字符串，这个方法不是用来读取（从本地提取）文件给用户看的，而是存储文件。
						例如：读取文件内容，传递给后台，后台接受了数据之后，再将数据存储在数据库中等。
					3.readAsDataURL():读取文件获取一段以data开头的字符串，这段字符串的本质就是DataURL.DataURL是一种将文件（这个文件一般就是图像或者能够嵌入到文档的文件格式）嵌入到文档的方案，DataURL是资源转换为base64编码的字符串形式，并且这些内容直接存储在url中>>优化网站的加载速度和执行效率

				文件读取事件：用来监听文件的读取,对象是文件对象
					语法如：
						var fileReader = new FileReader();
						fileReader.onabort = function (){...}

					1.onabort:读取文件中断时触发
					2.onerror:读取文件错误时触发
					3.onload:文件读取完成时触发
					4.onloadend:文件读取完成时触发，无论成功还是失败
					5.onloadstart:文件开始读取时触发
					6.onprogress:读取文件过程中触发，可以配合进度条展示

				步骤：
					1.实例化FileReader对象: 
						var reader = new FileReader();
					2.获取文件对象：存放于files属性里，该属性是一个数组	
						var file = reader.files[0];
					3.开始读取文件:用以上三种方法中的其中一种
						reader.readAsText(file[0]);
					4.监听事件：
						reader.onload(){...}
					5.获取文件结果:存放于result属性来获取
						var result = reader.result;

				例子：
					<div>
						<img src="" alt="">1
						<form action="">
							<input id="f" type="file" value="上传文件" onchange="getFileContent()">		
						</form>
					</div>
					<script>
						function getFileContent(){
							var render = new FileReader();		//实例化对象
							var file = document.querySelector("#f");
							var files = file.files;				//获取文件
							render.readAsDataURL(files[0]);		//读取文件
							render.onloadend = function (){		//监听读取文件事件
								var imgElement = document.querySelector('img');
								console.log(render.result);
								imgElement.src = render.result;		//渲染结果
							}
						}
					</script>

			5.拖拽接口：
				具体文档可以查看菜鸟教程里的拖动事件，https://www.runoob.com/jsref/dom-obj-event.html
				在H5中，想要拖拽元素（例如拖拽的登陆验证），就必须在元素上添加draggable="true"，图片和超链接默认就可以拖拽

				拖拽事件：
					被拖拽元素的事件
						ondrag:应用于拖拽元素，整个拖拽过程都会调用，会持续触发
						ondragstart:当拖拽开始时触发
						ondragleave:当鼠标离开拖拽元素时触发，是鼠标在拖拽过程中离开元素
						ondragend:当拖拽结束时调用

					目标元素，拖拽到目标块的元素:
						ondragenter:当拖拽元素进入时触发，只在那一瞬间触发，不是持续触发
						ondragover:当拖拽元素停留在目标元素上时触发,会一直触发，持续触发
						ondrop:当被拖拽元素在目标元素上松开鼠标时触发。
							浏览器会默认阻止ondrop事件,需要在ondragover中阻止浏览器的默认行为，即在ondragover事件函数里调用:e.preventDefault();
						ondropleave:当鼠标离开目标元素时触发
				
				dataTransfer:在进行拖放操作的时候，dataTransfer对象可以用来保存被拖动的数据。它可以保存一项或多项数据、一种或多数数据类型。
					保存的数据只能是字符串类型的

				例子：
					1.见文档例子：https://www.runoob.com/try/try.php?filename=tryjsref_ondrag_all
					2.自定义例子:
						<div>
							<img id="img1" src="1.PNG" width="400" height="400" alt="">
						</div>
						<div>	
						</div>

						<script>
							document.ondragstart = function(e){
								var id = document.querySelector("img").id;
								e.dataTransfer.setData('id',id);			//使用dataTransfer在拖动事件中传递数据，局部变量，拖动完成后，释放内存
							}
							document.ondragenter = function(){
								console.log("她进来了");
							}
							document.ondragover = function (e) {
								e.preventDefault();
								console.log("她走了");
							}
							document.ondropleave = function (){
								console.log("真JB走了");
							}
							document.ondrop = function(e){
								var id = e.dataTransfer.getData("id");
								var img = document.querySelector("#" + id);
								e.target.appendChild(img);
								console.log("在我这里留下东西");
							}
						</script>


			6.多媒体事件：
				详见文档：https://www.runoob.com/jsref/dom-obj-event.html、

			7.定位接口：
				文档：https://www.runoob.com/html/html5-geolocation.html
				获取定位的方式有:IP地址，GPS,WIFI,手机信号，用户自定义
				而浏览器获取定位的方式是自动的，获取定位信息需要用户的授权

				函数:
					//success参数:获取地理信息成功时回调
					//error参数:获取地理信息失败时会调
					//option对象参数:调整获取当前地理信息的方式
						//enableHighAccuracy:true/false		是否使用高精度
						//timeout:设置超时的时间		单位毫秒
						//maximumAge:可以设置浏览器重新获取地理信息的间隔，单位是ms
					getCurrentPosition(success,error,option);

				例子：
					<script>
						getLocation();
						/*获取定位信息*/
						function getLocation(){
							if (navigator.geolocation){
								navigator.geolocation.getCurrentPosition(showPosition,showError,{timeout:3000});		
							}
							else{
								x.innerHTML="该浏览器不支持获取地理位置。";
							}
						}

						/*获取定位成功的回调*/
						function showPosition(position){
							console.log('获取信息成功');
				    		var latlon=position.coords.latitude+","+position.coords.longitude;
				    		console.log(latlon);
						}

						/*获取定位失败后的回调*/
						function showError(error){
							switch(error.code){
								case error.PERMISSION_DENIED:
									console.log("用户拒绝对获取地理位置的请求。");
									break;
								case error.POSITION_UNAVAILABLE:
									console.log("位置信息是不可用的。");
									break;
								case error.TIMEOUT:
									console.log("请求用户地理位置超时。");
									break;
								case error.UNKNOWN_ERROR:
									console.log("未知错误。");
									break;
							} 
						}
					</script>

				使用第三方接口才可以获取地理信息：百度地图,高德地图等，

			8.web存储
				1.sessionStorage:
					1.可以存储数据到本地，仅存储到当前页面的内存中，存储的容量大小5M左右
					2.生命周期为一个页面，如果页面关闭，则数据将丢失

					使用场景：比如在编辑一些过度的数据时，


					api：
						setItem(key,value):设置值
						getItem(key):根据key获取值
						removeItem(key):删除指定key的数据
						clear():清空所有数据

					如：
					<script>
						window.sessionStorage.setItem('name','德莱文');
					</script>

					查看，打开谷歌浏览器的F12，点击application菜单，查看sessionStorage即可

				2.localStorage:
					1.存储的内容到本地，存储的内容大概有20MB
					2.声明周期是永久保存在客户端的硬盘上

					使用场景：比如在编辑一些过度的数据时，一下子填不完，想要下次再填写

					api:
						setItem(key,value):设置值
						getItem(key):根据key获取值
						removeItem(key):删除指定key的数据
						clear():清空所有数据
				

			9.应用缓存：
				详见文档:https://www.runoob.com/html/html5-app-cache.html
				使用HTML5可以通过创建cache manifest文件，可以轻松创建web应用的离线版本

				优势：
					1.可以配置需要缓存的资源
					2.网络无连接应用仍可以使用
					3.本地读取缓存资源，提高访问速度，增强用户体验
					4.减少请求，缓解服务器负担

				使用:
					1.需要指定manifest，和创建index.appcache文件
						<!doctype html>
						<html lang="en" manifest="index.appcache">

					2.index.appcache格式：

						CACHE MANIFEST
						##应用缓存文件，首句不能改

						CACHE:
						##下面就是需要缓存的清单列表
						./1.PNG
						../2.png

						##以下是要从服务器读取的文件：
						NETWORK:
						./2.jpg


			10.多媒体接口：
				默认情况下，使用video标签在不同的浏览器下会显示不同的样式。为了自定义播放器，
				详见文档：http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp

				看文档里的API，操作视频的DOM
