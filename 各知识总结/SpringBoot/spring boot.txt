Spring MVC:
	

2.配置文件的存储和读取：
	1.默认将读取application.yml文件
	2.读取配置文件：	
		@Value("${weidian.appkey}")
		private String appkey;

3.配置Bean(即单例的类):
	@Configuration
	public class ServerConfiguration {
		
		@Bean
		public AbstractWeidianClient getWeidianClient(){
			return new VdianItemGetRequest(token, appkey);
		}
	}

4.调用外部http接口：
	1.在配置类里配置好bean
		@Bean	
	    public RestTemplate restTemplate() {
			return new RestTemplate();
	    }

	2.使用
		@Autowired 
    	private RestTemplate restTemplate;

    	发起post请求：
    		 String response = restTemplate.postForObject("http://localhost:81/taotask/startGoodsListingTask", paramMap, String.class);

        发起get请求:
        	restTemplate.getForObject("https://oauth.open.weidian.com/token?grant_type=client_credential&appkey=xxx&secret=xxx", String.class);

    3.最后一个参数为responseType,即响应类型,统一为String,json串。


5.URIBuilder,URI拼装和解析工具
		依赖：
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>4.5</version>
				<optional>true</optional>
			</dependency>


		URIBuilder uri = new URIBuilder(); 
		uri.addParameter("grant_type", "client_credential");
		uri.addParameter("appkey",appkey);
		uri.addParameter("secret",secret);
		
		如：https://oauth.open.weidian.com/token
		uri.setHost("oauth.open.weidian.com");	//设置主机
		uri.setPath("/token");					//设置path
		uri.setScheme("https");					//设置协议
		String url = uri.toString();


6.Spring MVC:
	SpringMVC官方文档：https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/web.html#mvc

	Tomcat执行顺序：
		Filter -> Servlet -> Interceptor -> controller
	
	1.处理方法(method)：

	请求参数：https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/web.html#mvc-ann-arguments
		例子：
		@RequestMapping(value = "/aa/{user}")
		public User getUser(@PathVariable Long user,@RequestParam("userName") String userName, @RequestHeader("Accept-Encoding") String encoding ,@RequestBody requestBody，@CookieValue("JSESSIONID") String cookie,@SessionAttribute User user, @RequestParam("file") MultipartFile file，@ResponseBody Goods goods){
			 ...
		}

		1.@RequestParam:Servlet请求参数（即查询参数或表单数据）绑定到控制器中的方法参数。
		2.@RequestHeader:将请求标头绑定到控制器中的方法参数。
		3.@PathVariable:路径变量
		4.@CookieValue：将HTTP cookie的值绑定到控制器中的方法参数。
		5.@SessionAttribute:访问全局管理的预先存在的会话属性
		6.@RequestAttribute:访问先前创建的预先存在的请求属性（例如，通过Servlet Filter 或HandlerInterceptor）
		7.重定向属性：
			return "redirect:files/{path}";
		8.Multipart:
			POST的内容与要求multipart/form-data进行解析
			将参数类型声明为List<MultipartFile>允许解析相同参数名称的多个文件。
		9.@ResponseBody:
			将请求传递来的参数赋值到对象里，等于是自动赋值,对象里不存在的属性就不赋值
			也可以用List<Map<String,Object>>来对照赋值
			例子：
				@ResponseBody Goods goods
				@ResponseBody List<Map<String,Object>> Goods
		10.@ResponseBody:返回字符串
		11.ResponseEntity<T>:将对象自动返回JSON串格式到客户端
			如：
				public ResponseEntity<WxEntity> test1(){
					WxEntity w = new WxEntity();
					w.setId("asdasd");
					w.setName("哈哈");
					return new ResponseEntity<WxEntity>(w,HttpStatus.OK);
				}


	2.控制器建议（Controller）:
		1.@Controller:标识为一个控制器
		2.@RequestMapping:请求映射路径
		3.@RestController: 等于 @ResponseBody + @Controller

	3.拦截器：
		文档：https://docs.spring.io/spring/docs/5.1.8.RELEASE/spring-framework-reference/web.html#mvc-config-interceptors
		1.说明：对方法或请求进行拦截，方法调用前，方法调用后

		使用：
			@Configuration
			@EnableWebMvc
			public class WebConfig implements WebMvcConfigurer {

			    @Override
			    public void addInterceptors(InterceptorRegistry registry) {
			        registry.addInterceptor(new LocaleChangeInterceptor());
			        registry.addInterceptor(new ThemeChangeInterceptor()).addPathPatterns("/**").excludePathPatterns("/admin/**");
			        registry.addInterceptor(new SecurityInterceptor()).addPathPatterns("/secure/*");
			    }
			}

	4.过滤器：

7.静态资源：
	1.默认情况下，Spring Boot从类路径中的/static（ /public或/resources或/META-INF/resources）目录或者根目录中提供静态内容ServletContext

	2.可以使用该spring.mvc.static-path-pattern属性对其进行调整

	3.application.yml:
		spring.mvc.static-path-pattern = / resources / **

8.模板引擎：
	Thymeleaf：
	当使用模板引擎和默认配置时，模板将自动从中获取src/main/resources/templates。

9.spring security:
	目的：解决了认证授权和资源保护的方案，不需要用提供用户名和密码
	1.oAuth标准:
		oAuth是一种协议，主要是提供认证和授权的标准。与以往的授权方式不同之处是oAuth的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此 oAuth 是安全的。
	
	2.Spring Security框架:实现了oAuth标准

	3.注意：客户端不能直接访问资源服务器，需要先访问认证服务器

	4.访问自己的资源：	
		如资源: http://localhost/users/getUserinfo
		带上令牌(token)才能查询：http://localhost/users/getUserinfo?access_token=123456
		2.refresh_token(刷新令牌,为了防止用户获取了token无限制的访问资源)
			1.Refresh Token 一定是保存在客户端的服务器上 ，而绝不能存放在狭义的客户端（例如 App、PC 端软件）上。调用 refresh 接口的时候，一定是从服务器到服务器的访问。

			2.oAuth2.0 引入了 appid 机制。即每一个 appid 都对应一个 appSecret appSecret 会在客户端申请 appid 时，随 appid 一起分配给客户端。客户端必须把 appSecret 妥善保管在服务器上，决不能泄露。刷新 Access Token 时，需要验证这个 appSecret

			刷新token接口会类似于：
				http://localhost/refresh?refresh_toekn=111&appid=222&appSecret=333

	5.客户端授权模式:
		文档：https://www.funtl.com/zh/spring-security-oauth2/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F.html#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91
		1.implict:简化模式，不推荐使用
		2.authorization code:授权码模式，即使用令牌
			1.授权码模式适用于有自己的服务器的应用，它是一个一次性的临时凭证，用来换取 access_token 和 refresh_token。
			2.例子:自己的应用对接微信小程序
				1.认证：获取微信用户唯一标识 OpenID 和 会话密钥 session_key。
					1.通过微信小程序给予的appid和secret在服务器端（一定要在服务器端，在客户端发送请求不安全）向微信接口发送请求
						如：https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET
						请求响应返回会用的OpenId和session_key

				2.授权（获取令牌）：访问微信接口服务
					1.获取小程序全局唯一后台接口调用凭据（access_token,就是访问令牌，需要在服务器端调用接口读取令牌，而不是客户端）
						如：https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET
						则返回：access_toekn,即令牌

					2.访问接口服务,拿取到的令牌调用微信接口服务
						如：https://api.weixin.qq.com/datacube/getweanalysisappidmonthlyretaininfo?access_token=ACCESS_TOKEN

		3.resource owner password credentials：密码模式,用户向客户端提供自己的用户名和密码。
			流程：
				1.用户用账号密码向认证服务器换取token
				2.用户使用token向资源服务器访问资源
			场景：同一个企业内部的不同产品要使用本企业的 oAuth2.0 体系，因为都是自己企业的用户，不需要给第三方，如QQ和QQ空间


	6.代码实现：
		1.认证,需要继承WebSecurityConfigurerAdapter类
		2.授权,需要继承AuthorizationServerConfigurerAdapter

	7.基于权限
	8.令牌的管理方式：
		1.使用数据库来存储令牌
		2.数据库表：	https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql

10.微服务架构：
	1.目的解耦
	2.分布式,多个服务（即服务器,多个后台）
		1.客户端（第三方等）如何访问
		2.
		3.服务之间的通信:对内RPC,对外Rest
	3.

11.配置多个数据源
	
12.整合mybatus plus